{"dependencies":[{"name":"./getRoutesCore","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":24,"index":259},"end":{"line":6,"column":50,"index":285}},{"start":{"line":86,"column":22,"index":3522},"end":{"line":86,"column":48,"index":3548}}],"key":"gOO2v0sl1XvYI6QH2o9IVEEjbmQ=","exportNames":["*"]}},{"name":"./views/Navigator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":33,"index":1275},"end":{"line":27,"column":61,"index":1303}}],"key":"PBpeZlMTHxnI1L+/mUlv77sLyo4=","exportNames":["*"]}},{"name":"./views/Sitemap","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":59,"index":1867},"end":{"line":41,"column":85,"index":1893}}],"key":"G8ud5EPcJ8MF2dMhl1o+nfNHuTs=","exportNames":["*"]}},{"name":"./views/Unmatched","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":56,"column":42,"index":2473},"end":{"line":56,"column":70,"index":2501}}],"key":"i1x8xpZw0K+kAMz1gUdMaXw0H74=","exportNames":["*"]}},{"name":"./getRoutesRedirects","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":71,"column":31,"index":3112},"end":{"line":71,"column":62,"index":3143}}],"key":"E6xJvmMQ8Tg9oU66GfkFALUrP4w=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getIgnoreList = exports.extrapolateGroups = exports.generateDynamic = void 0;\n  exports.getRoutes = getRoutes;\n  exports.getExactRoutes = getExactRoutes;\n  var getRoutesCore_1 = require(_dependencyMap[0], \"./getRoutesCore\");\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return (0, getRoutesCore_1.getRoutes)(contextModule, {\n      getSystemRoute(_ref, defaults) {\n        var route = _ref.route,\n          type = _ref.type;\n        if (route === '' && type === 'layout') {\n          // Root layout when no layout is defined.\n          return {\n            type: 'layout',\n            loadRoute: () => ({\n              default: require(_dependencyMap[1], \"./views/Navigator\").DefaultNavigator\n            }),\n            // Generate a fake file name for the directory\n            contextKey: 'expo-router/build/views/Navigator.js',\n            route: '',\n            generated: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '_sitemap' && type === 'route') {\n          return {\n            loadRoute() {\n              var _require = require(_dependencyMap[2], \"./views/Sitemap\"),\n                Sitemap = _require.Sitemap,\n                getNavOptions = _require.getNavOptions;\n              return {\n                default: Sitemap,\n                getNavOptions\n              };\n            },\n            route: '_sitemap',\n            type: 'route',\n            contextKey: 'expo-router/build/views/Sitemap.js',\n            generated: true,\n            internal: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '+not-found' && type === 'route') {\n          return {\n            loadRoute() {\n              return {\n                default: require(_dependencyMap[3], \"./views/Unmatched\").Unmatched\n              };\n            },\n            type: 'route',\n            route: '+not-found',\n            contextKey: 'expo-router/build/views/Unmatched.js',\n            generated: true,\n            internal: true,\n            dynamic: [{\n              name: '+not-found',\n              deep: true,\n              notFound: true\n            }],\n            children: []\n          };\n        } else if ((type === 'redirect' || type === 'rewrite') && defaults) {\n          return {\n            ...defaults,\n            loadRoute() {\n              return require(_dependencyMap[4], \"./getRoutesRedirects\").getRedirectModule(route);\n            }\n          };\n        }\n        throw new Error(`Unknown system route: ${route} and type: ${type}`);\n      },\n      ...options\n    });\n  }\n  function getExactRoutes(contextModule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getRoutes(contextModule, {\n      ...options,\n      skipGenerated: true\n    });\n  }\n  var getRoutesCore_2 = require(_dependencyMap[0], \"./getRoutesCore\");\n  Object.defineProperty(exports, \"generateDynamic\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.generateDynamic;\n    }\n  });\n  Object.defineProperty(exports, \"extrapolateGroups\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.extrapolateGroups;\n    }\n  });\n  Object.defineProperty(exports, \"getIgnoreList\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.getIgnoreList;\n    }\n  });\n});","lineCount":120,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getIgnoreList"],[7,23,3,21],[7,26,3,24,"exports"],[7,33,3,31],[7,34,3,32,"extrapolateGroups"],[7,51,3,49],[7,54,3,52,"exports"],[7,61,3,59],[7,62,3,60,"generateDynamic"],[7,77,3,75],[7,80,3,78],[7,85,3,83],[7,86,3,84],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getRoutes"],[8,19,4,17],[8,22,4,20,"getRoutes"],[8,31,4,29],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"getExactRoutes"],[9,24,5,22],[9,27,5,25,"getExactRoutes"],[9,41,5,39],[10,2,6,0],[10,6,6,6,"getRoutesCore_1"],[10,21,6,21],[10,24,6,24,"require"],[10,31,6,31],[10,32,6,31,"_dependencyMap"],[10,46,6,31],[10,68,6,49],[10,69,6,50],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,2,19,0],[23,11,19,9,"getRoutes"],[23,20,19,18,"getRoutes"],[23,21,19,19,"contextModule"],[23,34,19,32],[23,36,19,48],[24,4,19,48],[24,8,19,34,"options"],[24,15,19,41],[24,18,19,41,"arguments"],[24,27,19,41],[24,28,19,41,"length"],[24,34,19,41],[24,42,19,41,"arguments"],[24,51,19,41],[24,59,19,41,"undefined"],[24,68,19,41],[24,71,19,41,"arguments"],[24,80,19,41],[24,86,19,44],[24,87,19,45],[24,88,19,46],[25,4,20,4],[25,11,20,11],[25,12,20,12],[25,13,20,13],[25,15,20,15,"getRoutesCore_1"],[25,30,20,30],[25,31,20,31,"getRoutes"],[25,40,20,40],[25,42,20,42,"contextModule"],[25,55,20,55],[25,57,20,57],[26,6,21,8,"getSystemRoute"],[26,20,21,22,"getSystemRoute"],[26,21,21,22,"_ref"],[26,25,21,22],[26,27,21,40,"defaults"],[26,35,21,48],[26,37,21,50],[27,8,21,50],[27,12,21,25,"route"],[27,17,21,30],[27,20,21,30,"_ref"],[27,24,21,30],[27,25,21,25,"route"],[27,30,21,30],[28,10,21,32,"type"],[28,14,21,36],[28,17,21,36,"_ref"],[28,21,21,36],[28,22,21,32,"type"],[28,26,21,36],[29,8,22,12],[29,12,22,16,"route"],[29,17,22,21],[29,22,22,26],[29,24,22,28],[29,28,22,32,"type"],[29,32,22,36],[29,37,22,41],[29,45,22,49],[29,47,22,51],[30,10,23,16],[31,10,24,16],[31,17,24,23],[32,12,25,20,"type"],[32,16,25,24],[32,18,25,26],[32,26,25,34],[33,12,26,20,"loadRoute"],[33,21,26,29],[33,23,26,31,"loadRoute"],[33,24,26,31],[33,30,26,38],[34,14,27,24,"default"],[34,21,27,31],[34,23,27,33,"require"],[34,30,27,40],[34,31,27,40,"_dependencyMap"],[34,45,27,40],[34,69,27,60],[34,70,27,61],[34,71,28,29,"DefaultNavigator"],[35,12,29,20],[35,13,29,21],[35,14,29,22],[36,12,30,20],[37,12,31,20,"contextKey"],[37,22,31,30],[37,24,31,32],[37,62,31,70],[38,12,32,20,"route"],[38,17,32,25],[38,19,32,27],[38,21,32,29],[39,12,33,20,"generated"],[39,21,33,29],[39,23,33,31],[39,27,33,35],[40,12,34,20,"dynamic"],[40,19,34,27],[40,21,34,29],[40,25,34,33],[41,12,35,20,"children"],[41,20,35,28],[41,22,35,30],[42,10,36,16],[42,11,36,17],[43,8,37,12],[43,9,37,13],[43,15,38,17],[43,19,38,21,"route"],[43,24,38,26],[43,29,38,31],[43,39,38,41],[43,43,38,45,"type"],[43,47,38,49],[43,52,38,54],[43,59,38,61],[43,61,38,63],[44,10,39,16],[44,17,39,23],[45,12,40,20,"loadRoute"],[45,21,40,29,"loadRoute"],[45,22,40,29],[45,24,40,32],[46,14,41,24],[46,18,41,24,"_require"],[46,26,41,24],[46,29,41,59,"require"],[46,36,41,66],[46,37,41,66,"_dependencyMap"],[46,51,41,66],[46,73,41,84],[46,74,41,85],[47,16,41,32,"Sitemap"],[47,23,41,39],[47,26,41,39,"_require"],[47,34,41,39],[47,35,41,32,"Sitemap"],[47,42,41,39],[48,16,41,41,"getNavOptions"],[48,29,41,54],[48,32,41,54,"_require"],[48,40,41,54],[48,41,41,41,"getNavOptions"],[48,54,41,54],[49,14,42,24],[49,21,42,31],[50,16,42,33,"default"],[50,23,42,40],[50,25,42,42,"Sitemap"],[50,32,42,49],[51,16,42,51,"getNavOptions"],[52,14,42,65],[52,15,42,66],[53,12,43,20],[53,13,43,21],[54,12,44,20,"route"],[54,17,44,25],[54,19,44,27],[54,29,44,37],[55,12,45,20,"type"],[55,16,45,24],[55,18,45,26],[55,25,45,33],[56,12,46,20,"contextKey"],[56,22,46,30],[56,24,46,32],[56,60,46,68],[57,12,47,20,"generated"],[57,21,47,29],[57,23,47,31],[57,27,47,35],[58,12,48,20,"internal"],[58,20,48,28],[58,22,48,30],[58,26,48,34],[59,12,49,20,"dynamic"],[59,19,49,27],[59,21,49,29],[59,25,49,33],[60,12,50,20,"children"],[60,20,50,28],[60,22,50,30],[61,10,51,16],[61,11,51,17],[62,8,52,12],[62,9,52,13],[62,15,53,17],[62,19,53,21,"route"],[62,24,53,26],[62,29,53,31],[62,41,53,43],[62,45,53,47,"type"],[62,49,53,51],[62,54,53,56],[62,61,53,63],[62,63,53,65],[63,10,54,16],[63,17,54,23],[64,12,55,20,"loadRoute"],[64,21,55,29,"loadRoute"],[64,22,55,29],[64,24,55,32],[65,14,56,24],[65,21,56,31],[66,16,56,33,"default"],[66,23,56,40],[66,25,56,42,"require"],[66,32,56,49],[66,33,56,49,"_dependencyMap"],[66,47,56,49],[66,71,56,69],[66,72,56,70],[66,73,56,71,"Unmatched"],[67,14,56,81],[67,15,56,82],[68,12,57,20],[68,13,57,21],[69,12,58,20,"type"],[69,16,58,24],[69,18,58,26],[69,25,58,33],[70,12,59,20,"route"],[70,17,59,25],[70,19,59,27],[70,31,59,39],[71,12,60,20,"contextKey"],[71,22,60,30],[71,24,60,32],[71,62,60,70],[72,12,61,20,"generated"],[72,21,61,29],[72,23,61,31],[72,27,61,35],[73,12,62,20,"internal"],[73,20,62,28],[73,22,62,30],[73,26,62,34],[74,12,63,20,"dynamic"],[74,19,63,27],[74,21,63,29],[74,22,63,30],[75,14,63,32,"name"],[75,18,63,36],[75,20,63,38],[75,32,63,50],[76,14,63,52,"deep"],[76,18,63,56],[76,20,63,58],[76,24,63,62],[77,14,63,64,"notFound"],[77,22,63,72],[77,24,63,74],[78,12,63,79],[78,13,63,80],[78,14,63,81],[79,12,64,20,"children"],[79,20,64,28],[79,22,64,30],[80,10,65,16],[80,11,65,17],[81,8,66,12],[81,9,66,13],[81,15,67,17],[81,19,67,21],[81,20,67,22,"type"],[81,24,67,26],[81,29,67,31],[81,39,67,41],[81,43,67,45,"type"],[81,47,67,49],[81,52,67,54],[81,61,67,63],[81,66,67,68,"defaults"],[81,74,67,76],[81,76,67,78],[82,10,68,16],[82,17,68,23],[83,12,69,20],[83,15,69,23,"defaults"],[83,23,69,31],[84,12,70,20,"loadRoute"],[84,21,70,29,"loadRoute"],[84,22,70,29],[84,24,70,32],[85,14,71,24],[85,21,71,31,"require"],[85,28,71,38],[85,29,71,38,"_dependencyMap"],[85,43,71,38],[85,70,71,61],[85,71,71,62],[85,72,71,63,"getRedirectModule"],[85,89,71,80],[85,90,71,81,"route"],[85,95,71,86],[85,96,71,87],[86,12,72,20],[87,10,73,16],[87,11,73,17],[88,8,74,12],[89,8,75,12],[89,14,75,18],[89,18,75,22,"Error"],[89,23,75,27],[89,24,75,28],[89,49,75,53,"route"],[89,54,75,58],[89,68,75,72,"type"],[89,72,75,76],[89,74,75,78],[89,75,75,79],[90,6,76,8],[90,7,76,9],[91,6,77,8],[91,9,77,11,"options"],[92,4,78,4],[92,5,78,5],[92,6,78,6],[93,2,79,0],[94,2,80,0],[94,11,80,9,"getExactRoutes"],[94,25,80,23,"getExactRoutes"],[94,26,80,24,"contextModule"],[94,39,80,37],[94,41,80,53],[95,4,80,53],[95,8,80,39,"options"],[95,15,80,46],[95,18,80,46,"arguments"],[95,27,80,46],[95,28,80,46,"length"],[95,34,80,46],[95,42,80,46,"arguments"],[95,51,80,46],[95,59,80,46,"undefined"],[95,68,80,46],[95,71,80,46,"arguments"],[95,80,80,46],[95,86,80,49],[95,87,80,50],[95,88,80,51],[96,4,81,4],[96,11,81,11,"getRoutes"],[96,20,81,20],[96,21,81,21,"contextModule"],[96,34,81,34],[96,36,81,36],[97,6,82,8],[97,9,82,11,"options"],[97,16,82,18],[98,6,83,8,"skipGenerated"],[98,19,83,21],[98,21,83,23],[99,4,84,4],[99,5,84,5],[99,6,84,6],[100,2,85,0],[101,2,86,0],[101,6,86,4,"getRoutesCore_2"],[101,21,86,19],[101,24,86,22,"require"],[101,31,86,29],[101,32,86,29,"_dependencyMap"],[101,46,86,29],[101,68,86,47],[101,69,86,48],[102,2,87,0,"Object"],[102,8,87,6],[102,9,87,7,"defineProperty"],[102,23,87,21],[102,24,87,22,"exports"],[102,31,87,29],[102,33,87,31],[102,50,87,48],[102,52,87,50],[103,4,87,52,"enumerable"],[103,14,87,62],[103,16,87,64],[103,20,87,68],[104,4,87,70,"get"],[104,7,87,73],[104,9,87,75],[104,18,87,75,"get"],[104,19,87,75],[104,21,87,87],[105,6,87,89],[105,13,87,96,"getRoutesCore_2"],[105,28,87,111],[105,29,87,112,"generateDynamic"],[105,44,87,127],[106,4,87,129],[107,2,87,131],[107,3,87,132],[107,4,87,133],[108,2,88,0,"Object"],[108,8,88,6],[108,9,88,7,"defineProperty"],[108,23,88,21],[108,24,88,22,"exports"],[108,31,88,29],[108,33,88,31],[108,52,88,50],[108,54,88,52],[109,4,88,54,"enumerable"],[109,14,88,64],[109,16,88,66],[109,20,88,70],[110,4,88,72,"get"],[110,7,88,75],[110,9,88,77],[110,18,88,77,"get"],[110,19,88,77],[110,21,88,89],[111,6,88,91],[111,13,88,98,"getRoutesCore_2"],[111,28,88,113],[111,29,88,114,"extrapolateGroups"],[111,46,88,131],[112,4,88,133],[113,2,88,135],[113,3,88,136],[113,4,88,137],[114,2,89,0,"Object"],[114,8,89,6],[114,9,89,7,"defineProperty"],[114,23,89,21],[114,24,89,22,"exports"],[114,31,89,29],[114,33,89,31],[114,48,89,46],[114,50,89,48],[115,4,89,50,"enumerable"],[115,14,89,60],[115,16,89,62],[115,20,89,66],[116,4,89,68,"get"],[116,7,89,71],[116,9,89,73],[116,18,89,73,"get"],[116,19,89,73],[116,21,89,85],[117,6,89,87],[117,13,89,94,"getRoutesCore_2"],[117,28,89,109],[117,29,89,110,"getIgnoreList"],[117,42,89,123],[118,4,89,125],[119,2,89,127],[119,3,89,128],[119,4,89,129],[120,0,89,130],[120,3]],"functionMap":{"names":["<global>","getRoutes","getSystemRoute","loadRoute","getExactRoutes","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACkB;QCE;+BCK;sBDG;oBCW;qBDG;oBCY;qBDE;oBCa;qBDE;SDI;CDG;AIC;CJK;2EKE,uDL;6EKC,yDL;yEKC,qDL"}},"type":"js/module"}]}