{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/FlatList","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"DmaJKCBnIi5ZEPZkQdrt7FKBDEo=","exportNames":["*"]}},{"name":"./web/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":45,"index":86}}],"key":"0QFKLjYfUp4whm+krxBKZT/mgNk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = findNodeHandle;\n  var _FlatList = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/FlatList\"));\n  var _utils = require(_dependencyMap[2], \"./web/utils\");\n  function findNodeHandle(viewRef) {\n    // TODO: Remove this once we remove old API.\n    if (viewRef instanceof _FlatList.default) {\n      // @ts-ignore This is the only way to get the scroll ref from FlatList.\n      return viewRef._listRef._scrollRef.firstChild;\n    } // Old API assumes that child handler is HTMLElement.\n    // However, if we nest handlers, we will get ref to another handler.\n    // In that case, we want to recursively call findNodeHandle with new handler viewTag (which can also be ref to another handler).\n\n    if ((viewRef === null || viewRef === void 0 ? void 0 : viewRef.viewTag) !== undefined) {\n      return findNodeHandle(viewRef.viewTag);\n    }\n    if (viewRef instanceof Element) {\n      if (viewRef.style.display === 'contents') {\n        return findNodeHandle(viewRef.firstChild);\n      }\n      return viewRef;\n    }\n    if ((0, _utils.isRNSVGElement)(viewRef)) {\n      return viewRef.elementRef.current;\n    } // In new API, we receive ref object which `current` field points to  wrapper `div` with `display: contents;`.\n    // We want to return the first descendant (in DFS order) that doesn't have this property.\n\n    let element = viewRef === null || viewRef === void 0 ? void 0 : viewRef.current;\n    while (element && element.style.display === 'contents') {\n      element = element.firstChild;\n    }\n    return element;\n  }\n});","lineCount":38,"map":[[8,2,2,0],[8,6,2,0,"_utils"],[8,12,2,0],[8,15,2,0,"require"],[8,22,2,0],[8,23,2,0,"_dependencyMap"],[8,37,2,0],[9,2,3,15],[9,11,3,24,"findNodeHandle"],[9,25,3,38,"findNodeHandle"],[9,26,3,39,"viewRef"],[9,33,3,46],[9,35,3,48],[10,4,4,2],[11,4,5,2],[11,8,5,6,"viewRef"],[11,15,5,13],[11,27,5,25,"FlatList"],[11,44,5,33],[11,46,5,35],[12,6,6,4],[13,6,7,4],[13,13,7,11,"viewRef"],[13,20,7,18],[13,21,7,19,"_listRef"],[13,29,7,27],[13,30,7,28,"_scrollRef"],[13,40,7,38],[13,41,7,39,"firstChild"],[13,51,7,49],[14,4,8,2],[14,5,8,3],[14,6,8,4],[15,4,9,2],[16,4,10,2],[18,4,13,2],[18,8,13,6],[18,9,13,7,"viewRef"],[18,16,13,14],[18,21,13,19],[18,25,13,23],[18,29,13,27,"viewRef"],[18,36,13,34],[18,41,13,39],[18,46,13,44],[18,47,13,45],[18,50,13,48],[18,55,13,53],[18,56,13,54],[18,59,13,57,"viewRef"],[18,66,13,64],[18,67,13,65,"viewTag"],[18,74,13,72],[18,80,13,78,"undefined"],[18,89,13,87],[18,91,13,89],[19,6,14,4],[19,13,14,11,"findNodeHandle"],[19,27,14,25],[19,28,14,26,"viewRef"],[19,35,14,33],[19,36,14,34,"viewTag"],[19,43,14,41],[19,44,14,42],[20,4,15,2],[21,4,17,2],[21,8,17,6,"viewRef"],[21,15,17,13],[21,27,17,25,"Element"],[21,34,17,32],[21,36,17,34],[22,6,18,4],[22,10,18,8,"viewRef"],[22,17,18,15],[22,18,18,16,"style"],[22,23,18,21],[22,24,18,22,"display"],[22,31,18,29],[22,36,18,34],[22,46,18,44],[22,48,18,46],[23,8,19,6],[23,15,19,13,"findNodeHandle"],[23,29,19,27],[23,30,19,28,"viewRef"],[23,37,19,35],[23,38,19,36,"firstChild"],[23,48,19,46],[23,49,19,47],[24,6,20,4],[25,6,22,4],[25,13,22,11,"viewRef"],[25,20,22,18],[26,4,23,2],[27,4,25,2],[27,8,25,6],[27,12,25,6,"isRNSVGElement"],[27,33,25,20],[27,35,25,21,"viewRef"],[27,42,25,28],[27,43,25,29],[27,45,25,31],[28,6,26,4],[28,13,26,11,"viewRef"],[28,20,26,18],[28,21,26,19,"elementRef"],[28,31,26,29],[28,32,26,30,"current"],[28,39,26,37],[29,4,27,2],[29,5,27,3],[29,6,27,4],[30,4,28,2],[32,4,31,2],[32,8,31,6,"element"],[32,15,31,13],[32,18,31,16,"viewRef"],[32,25,31,23],[32,30,31,28],[32,34,31,32],[32,38,31,36,"viewRef"],[32,45,31,43],[32,50,31,48],[32,55,31,53],[32,56,31,54],[32,59,31,57],[32,64,31,62],[32,65,31,63],[32,68,31,66,"viewRef"],[32,75,31,73],[32,76,31,74,"current"],[32,83,31,81],[33,4,33,2],[33,11,33,9,"element"],[33,18,33,16],[33,22,33,20,"element"],[33,29,33,27],[33,30,33,28,"style"],[33,35,33,33],[33,36,33,34,"display"],[33,43,33,41],[33,48,33,46],[33,58,33,56],[33,60,33,58],[34,6,34,4,"element"],[34,13,34,11],[34,16,34,14,"element"],[34,23,34,21],[34,24,34,22,"firstChild"],[34,34,34,32],[35,4,35,2],[36,4,37,2],[36,11,37,9,"element"],[36,18,37,16],[37,2,38,0],[38,0,38,1],[38,3]],"functionMap":{"names":["<global>","findNodeHandle"],"mappings":"AAA;eCE;CDmC"}},"type":"js/module"}]}