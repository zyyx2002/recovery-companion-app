{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"]}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":36,"index":161}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":162},"end":{"line":4,"column":53,"index":215}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[1], \"../../../utils\");\n  var _getShadowNodeFromRef = require(_dependencyMap[2], \"../../../getShadowNodeFromRef\");\n  var _react = require(_dependencyMap[3], \"react\");\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[4], \"../../../findNodeHandle\"));\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    const refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref; // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);\n      } // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _utils.isFabric)() && global.isViewFlatteningDisabled) {\n        const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":38,"map":[[7,2,1,0],[7,6,1,0,"_utils"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_getShadowNodeFromRef"],[8,27,2,0],[8,30,2,0,"require"],[8,37,2,0],[8,38,2,0,"_dependencyMap"],[8,52,2,0],[9,2,3,0],[9,6,3,0,"_react"],[9,12,3,0],[9,15,3,0,"require"],[9,22,3,0],[9,23,3,0,"_dependencyMap"],[9,37,3,0],[10,2,4,0],[10,6,4,0,"_findNodeHandle"],[10,21,4,0],[10,24,4,0,"_interopRequireDefault"],[10,46,4,0],[10,47,4,0,"require"],[10,54,4,0],[10,55,4,0,"_dependencyMap"],[10,69,4,0],[11,2,5,0],[12,2,6,0],[13,2,7,0],[14,2,8,7],[14,11,8,16,"useViewRefHandler"],[14,28,8,33,"useViewRefHandler"],[14,29,8,34,"state"],[14,34,8,39],[14,36,8,41,"updateAttachedGestures"],[14,58,8,63],[14,60,8,65],[15,4,9,2],[15,10,9,8,"refHandler"],[15,20,9,18],[15,23,9,21],[15,27,9,21,"useCallback"],[15,45,9,32],[15,47,9,33,"ref"],[15,50,9,36],[15,54,9,40],[16,6,10,4],[16,10,10,8,"ref"],[16,13,10,11],[16,18,10,16],[16,22,10,20],[16,24,10,22],[17,8,11,6],[18,6,12,4],[19,6,14,4,"state"],[19,11,14,9],[19,12,14,10,"viewRef"],[19,19,14,17],[19,22,14,20,"ref"],[19,25,14,23],[19,26,14,24],[19,27,14,25],[21,6,16,4],[21,10,16,8,"state"],[21,15,16,13],[21,16,16,14,"previousViewTag"],[21,31,16,29],[21,36,16,34],[21,37,16,35],[21,38,16,36],[21,40,16,38],[22,8,17,6,"state"],[22,13,17,11],[22,14,17,12,"previousViewTag"],[22,29,17,27],[22,32,17,30],[22,36,17,30,"findNodeHandle"],[22,59,17,44],[22,61,17,45,"state"],[22,66,17,50],[22,67,17,51,"viewRef"],[22,74,17,58],[22,75,17,59],[23,6,18,4],[23,7,18,5],[23,8,18,6],[24,6,19,4],[26,6,22,4],[26,10,22,8],[26,11,22,9,"state"],[26,16,22,14],[26,17,22,15,"firstRender"],[26,28,22,26],[26,30,22,28],[27,8,23,6,"updateAttachedGestures"],[27,30,23,28],[27,31,23,29],[27,35,23,33],[27,36,23,34],[28,6,24,4],[29,6,26,4],[29,10,26,8,"__DEV__"],[29,17,26,15],[29,21,26,19],[29,25,26,19,"isFabric"],[29,40,26,27],[29,42,26,28],[29,43,26,29],[29,47,26,33,"global"],[29,53,26,39],[29,54,26,40,"isViewFlatteningDisabled"],[29,78,26,64],[29,80,26,66],[30,8,27,6],[30,14,27,12,"node"],[30,18,27,16],[30,21,27,19],[30,25,27,19,"getShadowNodeFromRef"],[30,67,27,39],[30,69,27,40,"ref"],[30,72,27,43],[30,73,27,44],[31,8,29,6],[31,12,29,10,"global"],[31,18,29,16],[31,19,29,17,"isViewFlatteningDisabled"],[31,43,29,41],[31,44,29,42,"node"],[31,48,29,46],[31,49,29,47],[31,54,29,52],[31,59,29,57],[31,61,29,59],[32,10,30,8,"console"],[32,17,30,15],[32,18,30,16,"error"],[32,23,30,21],[32,24,30,22],[32,28,30,22,"tagMessage"],[32,45,30,32],[32,47,30,33],[32,115,30,101],[32,118,30,104],[32,216,30,202],[32,217,30,203],[32,218,30,204],[33,8,31,6],[34,6,32,4],[35,4,33,2],[35,5,33,3],[35,7,33,5],[35,8,33,6,"state"],[35,13,33,11],[35,15,33,13,"updateAttachedGestures"],[35,37,33,35],[35,38,33,36],[35,39,33,37],[36,4,34,2],[36,11,34,9,"refHandler"],[36,21,34,19],[37,2,35,0],[38,0,35,1],[38,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCO;iCCC;GDwB;CDE"}},"type":"js/module"}]}