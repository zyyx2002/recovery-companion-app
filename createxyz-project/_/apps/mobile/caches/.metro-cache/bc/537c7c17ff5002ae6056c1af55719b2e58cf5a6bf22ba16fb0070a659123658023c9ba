{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-css-interop","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"GojJv+4gs9E3DINH6CdbjjB/YmY=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":624},"end":{"line":10,"column":31,"index":655}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":691},"end":{"line":12,"column":34,"index":725}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/StyleSheet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MK7+k1V+KnvCVW7Kj2k/ydtjmVU=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/View","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4kYBDC6LJJXoH7P9rWDi3vkLVB0=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/StatusBar","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"zzHKpVbCjTP+fv+3SRvKiN2M8pI=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"]}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":819},"end":{"line":14,"column":66,"index":885}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"]}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":886},"end":{"line":15,"column":66,"index":952}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"]}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":953},"end":{"line":16,"column":33,"index":986}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _ReactNativeCSSInterop = _interopRequireWildcard(require(_dependencyMap[1], \"react-native-css-interop\"));\n  var _react = _interopRequireWildcard(require(_dependencyMap[2], \"react\"));\n  var React = _react;\n  var _invariant = _interopRequireDefault(require(_dependencyMap[3], \"invariant\"));\n  var _Animated = _interopRequireDefault(require(_dependencyMap[4], \"react-native-web/dist/exports/Animated\"));\n  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[5], \"react-native-web/dist/exports/StyleSheet\"));\n  var _View = _interopRequireDefault(require(_dependencyMap[6], \"react-native-web/dist/exports/View\"));\n  var _Keyboard = _interopRequireDefault(require(_dependencyMap[7], \"react-native-web/dist/exports/Keyboard\"));\n  var _StatusBar = _interopRequireDefault(require(_dependencyMap[8], \"react-native-web/dist/exports/StatusBar\"));\n  var _I18nManager = _interopRequireDefault(require(_dependencyMap[9], \"react-native-web/dist/exports/I18nManager\"));\n  var _PanGestureHandler = require(_dependencyMap[10], \"../handlers/PanGestureHandler\");\n  var _TapGestureHandler = require(_dependencyMap[11], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[12], \"../State\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    constructor(_props) {\n      super(_props);\n      _defineProperty(this, \"openValue\", void 0);\n      _defineProperty(this, \"onGestureEvent\", void 0);\n      _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"drawerShown\", false);\n      _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n        // Event definition is based on\n        const {\n          drawerPosition,\n          drawerWidth,\n          drawerType\n        } = props;\n        const {\n          dragX: dragXValue,\n          touchX: touchXValue,\n          drawerTranslation,\n          containerWidth\n        } = state;\n        let dragX = dragXValue;\n        let touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = _Animated.default.multiply(new _Animated.default.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n\n          touchX = _Animated.default.add(new _Animated.default.Value(containerWidth), _Animated.default.multiply(new _Animated.default.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        } // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n\n        let translationX = dragX;\n        if (drawerType === 'front') {\n          const startPositionX = _Animated.default.add(touchX, _Animated.default.multiply(new _Animated.default.Value(-1), dragX));\n          const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _Animated.default.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        this.openValue = _Animated.default.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        const gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (this.props.onDrawerSlide) {\n          gestureOptions.listener = ev => {\n            var _this$props$onDrawerS, _this$props;\n            const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            const position = translationX / this.state.containerWidth;\n            (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n          };\n        }\n        this.onGestureEvent = _Animated.default.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      });\n      _defineProperty(this, \"handleContainerLayout\", ({\n        nativeEvent\n      }) => {\n        this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      });\n      _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow) => {\n        var _this$props$onDrawerS2, _this$props2;\n        (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n      });\n      _defineProperty(this, \"openingHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          this.handleRelease({\n            nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          this.emitStateChanged(DRAGGING, false);\n          this.setState({\n            drawerState: DRAGGING\n          });\n          if (this.props.keyboardDismissMode === 'on-drag') {\n            _Keyboard.default.dismiss();\n          }\n          if (this.props.hideStatusBar) {\n            _StatusBar.default.setHidden(true, this.props.statusBarAnimation || 'slide');\n          }\n        }\n      });\n      _defineProperty(this, \"onTapHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n          this.closeDrawer();\n        }\n      });\n      _defineProperty(this, \"handleRelease\", ({\n        nativeEvent\n      }) => {\n        const {\n          drawerWidth,\n          drawerPosition,\n          drawerType\n        } = this.props;\n        const {\n          containerWidth\n        } = this.state;\n        let {\n          translationX: dragX,\n          velocityX,\n          x: touchX\n        } = nativeEvent;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        const gestureStartX = touchX - dragX;\n        let dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n        const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        const shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      });\n      _defineProperty(this, \"updateShowing\", showing => {\n        var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n        this.drawerShown = showing;\n        (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        const {\n          drawerPosition,\n          minSwipeDistance,\n          edgeWidth\n        } = this.props;\n        const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n\n        const hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        }; // @ts-ignore internal API, maybe could be fixed in handler types\n\n        (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n          hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      });\n      _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed) => {\n        this.state.dragX.setValue(0);\n        this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n        if (fromValue != null) {\n          let nextFramePosition = fromValue;\n          if (this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        const willShow = toValue !== 0;\n        this.updateShowing(willShow);\n        this.emitStateChanged(SETTLING, willShow);\n        this.setState({\n          drawerState: SETTLING\n        });\n        if (this.props.hideStatusBar) {\n          _StatusBar.default.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n        }\n        _Animated.default.spring(this.state.drawerTranslation, {\n          velocity,\n          bounciness: 0,\n          toValue,\n          useNativeDriver: this.props.useNativeAnimations,\n          speed: speed !== null && speed !== void 0 ? speed : undefined\n        }).start(({\n          finished\n        }) => {\n          if (finished) {\n            this.emitStateChanged(IDLE, willShow);\n            this.setState({\n              drawerOpened: willShow\n            });\n            if (this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              var _this$props$onDrawerO, _this$props3;\n              (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n            } else {\n              var _this$props$onDrawerC, _this$props4;\n              (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n            }\n          }\n        });\n      });\n      _defineProperty(this, \"openDrawer\", (options = {}) => {\n        this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"closeDrawer\", (options = {}) => {\n        // TODO: decide if it should be null or undefined is the proper value\n        this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"renderOverlay\", () => {\n        /* Overlay styles */\n        (0, _invariant.default)(this.openValue, 'should be set');\n        let overlayOpacity;\n        if (this.state.drawerState !== IDLE) {\n          overlayOpacity = this.openValue;\n        } else {\n          overlayOpacity = this.state.drawerOpened ? 1 : 0;\n        }\n        const dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: this.props.overlayColor\n        };\n        return /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_TapGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: this.onTapHandlerStateChange\n        }, /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_Animated.default.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        }));\n      });\n      _defineProperty(this, \"renderDrawer\", () => {\n        const {\n          drawerBackgroundColor,\n          drawerWidth,\n          drawerPosition,\n          drawerType,\n          drawerContainerStyle,\n          contentContainerStyle\n        } = this.props;\n        const fromLeft = drawerPosition === 'left';\n        const drawerSlide = drawerType !== 'back';\n        const containerSlide = drawerType !== 'front'; // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n\n        const reverseContentDirection = _I18nManager.default.isRTL ? fromLeft : !fromLeft;\n        const dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        const openValue = this.openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        let containerStyles;\n        if (containerSlide) {\n          const containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        let drawerTranslateX = 0;\n        if (drawerSlide) {\n          const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        const drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_Animated.default.View, {\n          style: styles.main,\n          onLayout: this.handleContainerLayout\n        }, /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_Animated.default.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes'\n        }, typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_Animated.default.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n        }, /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_View.default, {\n          style: dynamicDrawerStyles\n        }, this.props.renderNavigationView(this.openValue))));\n      });\n      _defineProperty(this, \"setPanGestureRef\", ref => {\n        var _this$props$onGesture, _this$props5;\n\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        this.panGestureHandler.current = ref;\n        (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n      });\n      const _dragX = new _Animated.default.Value(0);\n      const _touchX = new _Animated.default.Value(0);\n      const _drawerTranslation = new _Animated.default.Value(0);\n      this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(_props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/_ReactNativeCSSInterop.createInteropElement(_PanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }\n  exports.default = DrawerLayout;\n  _defineProperty(DrawerLayout, \"defaultProps\", {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  });\n  _defineProperty(DrawerLayout, \"positions\", {\n    Left: 'left',\n    Right: 'right'\n  });\n  const styles = _StyleSheet.default.create({\n    drawerContainer: {\n      ..._StyleSheet.default.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ..._StyleSheet.default.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ..._StyleSheet.default.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ..._StyleSheet.default.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":529,"map":[[8,2,10,0],[8,6,10,0,"_react"],[8,12,10,0],[8,15,10,0,"_interopRequireWildcard"],[8,38,10,0],[8,39,10,0,"require"],[8,46,10,0],[8,47,10,0,"_dependencyMap"],[8,61,10,0],[9,2,10,31],[9,6,10,31,"React"],[9,11,10,31],[9,14,10,31,"_react"],[9,20,10,31],[10,2,12,0],[10,6,12,0,"_invariant"],[10,16,12,0],[10,19,12,0,"_interopRequireDefault"],[10,41,12,0],[10,42,12,0,"require"],[10,49,12,0],[10,50,12,0,"_dependencyMap"],[10,64,12,0],[11,2,12,34],[11,6,12,34,"_Animated"],[11,15,12,34],[11,18,12,34,"_interopRequireDefault"],[11,40,12,34],[11,41,12,34,"require"],[11,48,12,34],[11,49,12,34,"_dependencyMap"],[11,63,12,34],[12,2,12,34],[12,6,12,34,"_StyleSheet"],[12,17,12,34],[12,20,12,34,"_interopRequireDefault"],[12,42,12,34],[12,43,12,34,"require"],[12,50,12,34],[12,51,12,34,"_dependencyMap"],[12,65,12,34],[13,2,12,34],[13,6,12,34,"_View"],[13,11,12,34],[13,14,12,34,"_interopRequireDefault"],[13,36,12,34],[13,37,12,34,"require"],[13,44,12,34],[13,45,12,34,"_dependencyMap"],[13,59,12,34],[14,2,12,34],[14,6,12,34,"_Keyboard"],[14,15,12,34],[14,18,12,34,"_interopRequireDefault"],[14,40,12,34],[14,41,12,34,"require"],[14,48,12,34],[14,49,12,34,"_dependencyMap"],[14,63,12,34],[15,2,12,34],[15,6,12,34,"_StatusBar"],[15,16,12,34],[15,19,12,34,"_interopRequireDefault"],[15,41,12,34],[15,42,12,34,"require"],[15,49,12,34],[15,50,12,34,"_dependencyMap"],[15,64,12,34],[16,2,12,34],[16,6,12,34,"_I18nManager"],[16,18,12,34],[16,21,12,34,"_interopRequireDefault"],[16,43,12,34],[16,44,12,34,"require"],[16,51,12,34],[16,52,12,34,"_dependencyMap"],[16,66,12,34],[17,2,14,0],[17,6,14,0,"_PanGestureHandler"],[17,24,14,0],[17,27,14,0,"require"],[17,34,14,0],[17,35,14,0,"_dependencyMap"],[17,49,14,0],[18,2,15,0],[18,6,15,0,"_TapGestureHandler"],[18,24,15,0],[18,27,15,0,"require"],[18,34,15,0],[18,35,15,0,"_dependencyMap"],[18,49,15,0],[19,2,16,0],[19,6,16,0,"_State"],[19,12,16,0],[19,15,16,0,"require"],[19,22,16,0],[19,23,16,0,"_dependencyMap"],[19,37,16,0],[20,2,16,33],[20,11,16,33,"_interopRequireWildcard"],[20,35,16,33,"e"],[20,36,16,33],[20,38,16,33,"t"],[20,39,16,33],[20,68,16,33,"WeakMap"],[20,75,16,33],[20,81,16,33,"r"],[20,82,16,33],[20,89,16,33,"WeakMap"],[20,96,16,33],[20,100,16,33,"n"],[20,101,16,33],[20,108,16,33,"WeakMap"],[20,115,16,33],[20,127,16,33,"_interopRequireWildcard"],[20,150,16,33],[20,162,16,33,"_interopRequireWildcard"],[20,163,16,33,"e"],[20,164,16,33],[20,166,16,33,"t"],[20,167,16,33],[20,176,16,33,"t"],[20,177,16,33],[20,181,16,33,"e"],[20,182,16,33],[20,186,16,33,"e"],[20,187,16,33],[20,188,16,33,"__esModule"],[20,198,16,33],[20,207,16,33,"e"],[20,208,16,33],[20,214,16,33,"o"],[20,215,16,33],[20,217,16,33,"i"],[20,218,16,33],[20,220,16,33,"f"],[20,221,16,33],[20,226,16,33,"__proto__"],[20,235,16,33],[20,243,16,33,"default"],[20,250,16,33],[20,252,16,33,"e"],[20,253,16,33],[20,270,16,33,"e"],[20,271,16,33],[20,294,16,33,"e"],[20,295,16,33],[20,320,16,33,"e"],[20,321,16,33],[20,330,16,33,"f"],[20,331,16,33],[20,337,16,33,"o"],[20,338,16,33],[20,341,16,33,"t"],[20,342,16,33],[20,345,16,33,"n"],[20,346,16,33],[20,349,16,33,"r"],[20,350,16,33],[20,358,16,33,"o"],[20,359,16,33],[20,360,16,33,"has"],[20,363,16,33],[20,364,16,33,"e"],[20,365,16,33],[20,375,16,33,"o"],[20,376,16,33],[20,377,16,33,"get"],[20,380,16,33],[20,381,16,33,"e"],[20,382,16,33],[20,385,16,33,"o"],[20,386,16,33],[20,387,16,33,"set"],[20,390,16,33],[20,391,16,33,"e"],[20,392,16,33],[20,394,16,33,"f"],[20,395,16,33],[20,411,16,33,"t"],[20,412,16,33],[20,416,16,33,"e"],[20,417,16,33],[20,433,16,33,"t"],[20,434,16,33],[20,441,16,33,"hasOwnProperty"],[20,455,16,33],[20,456,16,33,"call"],[20,460,16,33],[20,461,16,33,"e"],[20,462,16,33],[20,464,16,33,"t"],[20,465,16,33],[20,472,16,33,"i"],[20,473,16,33],[20,477,16,33,"o"],[20,478,16,33],[20,481,16,33,"Object"],[20,487,16,33],[20,488,16,33,"defineProperty"],[20,502,16,33],[20,507,16,33,"Object"],[20,513,16,33],[20,514,16,33,"getOwnPropertyDescriptor"],[20,538,16,33],[20,539,16,33,"e"],[20,540,16,33],[20,542,16,33,"t"],[20,543,16,33],[20,550,16,33,"i"],[20,551,16,33],[20,552,16,33,"get"],[20,555,16,33],[20,559,16,33,"i"],[20,560,16,33],[20,561,16,33,"set"],[20,564,16,33],[20,568,16,33,"o"],[20,569,16,33],[20,570,16,33,"f"],[20,571,16,33],[20,573,16,33,"t"],[20,574,16,33],[20,576,16,33,"i"],[20,577,16,33],[20,581,16,33,"f"],[20,582,16,33],[20,583,16,33,"t"],[20,584,16,33],[20,588,16,33,"e"],[20,589,16,33],[20,590,16,33,"t"],[20,591,16,33],[20,602,16,33,"f"],[20,603,16,33],[20,608,16,33,"e"],[20,609,16,33],[20,611,16,33,"t"],[20,612,16,33],[21,2,1,0],[21,11,1,9,"_defineProperty"],[21,26,1,24,"_defineProperty"],[21,27,1,25,"obj"],[21,30,1,28],[21,32,1,30,"key"],[21,35,1,33],[21,37,1,35,"value"],[21,42,1,40],[21,44,1,42],[22,4,1,44],[22,8,1,48,"key"],[22,11,1,51],[22,15,1,55,"obj"],[22,18,1,58],[22,20,1,60],[23,6,1,62,"Object"],[23,12,1,68],[23,13,1,69,"defineProperty"],[23,27,1,83],[23,28,1,84,"obj"],[23,31,1,87],[23,33,1,89,"key"],[23,36,1,92],[23,38,1,94],[24,8,1,96,"value"],[24,13,1,101],[24,15,1,103,"value"],[24,20,1,108],[25,8,1,110,"enumerable"],[25,18,1,120],[25,20,1,122],[25,24,1,126],[26,8,1,128,"configurable"],[26,20,1,140],[26,22,1,142],[26,26,1,146],[27,8,1,148,"writable"],[27,16,1,156],[27,18,1,158],[28,6,1,163],[28,7,1,164],[28,8,1,165],[29,4,1,167],[29,5,1,168],[29,11,1,174],[30,6,1,176,"obj"],[30,9,1,179],[30,10,1,180,"key"],[30,13,1,183],[30,14,1,184],[30,17,1,187,"value"],[30,22,1,192],[31,4,1,194],[32,4,1,196],[32,11,1,203,"obj"],[32,14,1,206],[33,2,1,208],[35,2,3,0],[36,2,4,0],[37,2,5,0],[38,2,6,0],[39,2,7,0],[40,2,8,0],[41,2,9,0],[43,2,17,0],[43,8,17,6,"DRAG_TOSS"],[43,17,17,15],[43,20,17,18],[43,24,17,22],[44,2,18,0],[44,8,18,6,"IDLE"],[44,12,18,10],[44,15,18,13],[44,21,18,19],[45,2,19,0],[45,8,19,6,"DRAGGING"],[45,16,19,14],[45,19,19,17],[45,29,19,27],[46,2,20,0],[46,8,20,6,"SETTLING"],[46,16,20,14],[46,19,20,17],[46,29,20,27],[47,2,21,0],[48,0,22,0],[49,0,23,0],[51,2,25,0],[52,0,26,0],[53,0,27,0],[54,2,28,15],[54,8,28,21,"DrawerLayout"],[54,20,28,33],[54,29,28,42,"Component"],[54,45,28,51],[54,46,28,52],[55,4,29,2,"constructor"],[55,15,29,13,"constructor"],[55,16,29,14,"_props"],[55,22,29,20],[55,24,29,22],[56,6,30,4],[56,11,30,9],[56,12,30,10,"_props"],[56,18,30,16],[56,19,30,17],[57,6,32,4,"_defineProperty"],[57,21,32,19],[57,22,32,20],[57,26,32,24],[57,28,32,26],[57,39,32,37],[57,41,32,39],[57,46,32,44],[57,47,32,45],[57,48,32,46],[58,6,34,4,"_defineProperty"],[58,21,34,19],[58,22,34,20],[58,26,34,24],[58,28,34,26],[58,44,34,42],[58,46,34,44],[58,51,34,49],[58,52,34,50],[58,53,34,51],[59,6,36,4,"_defineProperty"],[59,21,36,19],[59,22,36,20],[59,26,36,24],[59,28,36,26],[59,54,36,52],[59,56,36,54],[59,69,36,67,"React"],[59,74,36,72],[59,75,36,73,"createRef"],[59,84,36,82],[59,85,36,83],[59,86,36,84],[59,87,36,85],[60,6,38,4,"_defineProperty"],[60,21,38,19],[60,22,38,20],[60,26,38,24],[60,28,38,26],[60,47,38,45],[60,49,38,47],[60,62,38,60,"React"],[60,67,38,65],[60,68,38,66,"createRef"],[60,77,38,75],[60,78,38,76],[60,79,38,77],[60,80,38,78],[61,6,40,4,"_defineProperty"],[61,21,40,19],[61,22,40,20],[61,26,40,24],[61,28,40,26],[61,47,40,45],[61,49,40,47],[61,62,40,60,"React"],[61,67,40,65],[61,68,40,66,"createRef"],[61,77,40,75],[61,78,40,76],[61,79,40,77],[61,80,40,78],[62,6,42,4,"_defineProperty"],[62,21,42,19],[62,22,42,20],[62,26,42,24],[62,28,42,26],[62,41,42,39],[62,43,42,41],[62,48,42,46],[62,49,42,47],[63,6,44,4,"_defineProperty"],[63,21,44,19],[63,22,44,20],[63,26,44,24],[63,28,44,26],[63,49,44,47],[63,51,44,49],[63,52,44,50,"props"],[63,57,44,55],[63,59,44,57,"state"],[63,64,44,62],[63,69,44,67],[64,8,45,6],[65,8,46,6],[65,14,46,12],[66,10,47,8,"drawerPosition"],[66,24,47,22],[67,10,48,8,"drawerWidth"],[67,21,48,19],[68,10,49,8,"drawerType"],[69,8,50,6],[69,9,50,7],[69,12,50,10,"props"],[69,17,50,15],[70,8,51,6],[70,14,51,12],[71,10,52,8,"dragX"],[71,15,52,13],[71,17,52,15,"dragXValue"],[71,27,52,25],[72,10,53,8,"touchX"],[72,16,53,14],[72,18,53,16,"touchXValue"],[72,29,53,27],[73,10,54,8,"drawerTranslation"],[73,27,54,25],[74,10,55,8,"containerWidth"],[75,8,56,6],[75,9,56,7],[75,12,56,10,"state"],[75,17,56,15],[76,8,57,6],[76,12,57,10,"dragX"],[76,17,57,15],[76,20,57,18,"dragXValue"],[76,30,57,28],[77,8,58,6],[77,12,58,10,"touchX"],[77,18,58,16],[77,21,58,19,"touchXValue"],[77,32,58,30],[78,8,60,6],[78,12,60,10,"drawerPosition"],[78,26,60,24],[78,31,60,29],[78,37,60,35],[78,39,60,37],[79,10,61,8],[80,10,62,8],[81,10,63,8],[82,10,64,8],[83,10,65,8],[84,10,66,8],[85,10,67,8,"dragX"],[85,15,67,13],[85,18,67,16,"Animated"],[85,35,67,24],[85,36,67,25,"multiply"],[85,44,67,33],[85,45,67,34],[85,49,67,38,"Animated"],[85,66,67,46],[85,67,67,47,"Value"],[85,72,67,52],[85,73,67,53],[85,74,67,54],[85,75,67,55],[85,76,67,56],[85,78,67,58,"dragXValue"],[85,88,67,68],[85,89,67,69],[85,90,67,70],[85,91,67,71],[87,10,69,8,"touchX"],[87,16,69,14],[87,19,69,17,"Animated"],[87,36,69,25],[87,37,69,26,"add"],[87,40,69,29],[87,41,69,30],[87,45,69,34,"Animated"],[87,62,69,42],[87,63,69,43,"Value"],[87,68,69,48],[87,69,69,49,"containerWidth"],[87,83,69,63],[87,84,69,64],[87,86,69,66,"Animated"],[87,103,69,74],[87,104,69,75,"multiply"],[87,112,69,83],[87,113,69,84],[87,117,69,88,"Animated"],[87,134,69,96],[87,135,69,97,"Value"],[87,140,69,102],[87,141,69,103],[87,142,69,104],[87,143,69,105],[87,144,69,106],[87,146,69,108,"touchXValue"],[87,157,69,119],[87,158,69,120],[87,159,69,121],[87,160,69,122],[87,161,69,123],[89,10,71,8,"touchXValue"],[89,21,71,19],[89,22,71,20,"setValue"],[89,30,71,28],[89,31,71,29,"containerWidth"],[89,45,71,43],[89,46,71,44],[90,8,72,6],[90,9,72,7],[90,15,72,13],[91,10,73,8,"touchXValue"],[91,21,73,19],[91,22,73,20,"setValue"],[91,30,73,28],[91,31,73,29],[91,32,73,30],[91,33,73,31],[92,8,74,6],[92,9,74,7],[92,10,74,8],[93,8,75,6],[94,8,76,6],[95,8,77,6],[96,8,78,6],[97,8,79,6],[98,8,80,6],[99,8,81,6],[100,8,82,6],[101,8,83,6],[102,8,84,6],[103,8,85,6],[104,8,86,6],[105,8,87,6],[106,8,88,6],[107,8,89,6],[108,8,90,6],[109,8,91,6],[110,8,92,6],[111,8,93,6],[112,8,94,6],[113,8,95,6],[114,8,96,6],[115,8,97,6],[116,8,98,6],[118,8,101,6],[118,12,101,10,"translationX"],[118,24,101,22],[118,27,101,25,"dragX"],[118,32,101,30],[119,8,103,6],[119,12,103,10,"drawerType"],[119,22,103,20],[119,27,103,25],[119,34,103,32],[119,36,103,34],[120,10,104,8],[120,16,104,14,"startPositionX"],[120,30,104,28],[120,33,104,31,"Animated"],[120,50,104,39],[120,51,104,40,"add"],[120,54,104,43],[120,55,104,44,"touchX"],[120,61,104,50],[120,63,104,52,"Animated"],[120,80,104,60],[120,81,104,61,"multiply"],[120,89,104,69],[120,90,104,70],[120,94,104,74,"Animated"],[120,111,104,82],[120,112,104,83,"Value"],[120,117,104,88],[120,118,104,89],[120,119,104,90],[120,120,104,91],[120,121,104,92],[120,123,104,94,"dragX"],[120,128,104,99],[120,129,104,100],[120,130,104,101],[121,10,105,8],[121,16,105,14,"dragOffsetFromOnStartPosition"],[121,45,105,43],[121,48,105,46,"startPositionX"],[121,62,105,60],[121,63,105,61,"interpolate"],[121,74,105,72],[121,75,105,73],[122,12,106,10,"inputRange"],[122,22,106,20],[122,24,106,22],[122,25,106,23,"drawerWidth"],[122,36,106,34],[122,39,106,37],[122,40,106,38],[122,42,106,40,"drawerWidth"],[122,53,106,51],[122,55,106,53,"drawerWidth"],[122,66,106,64],[122,69,106,67],[122,70,106,68],[122,71,106,69],[123,12,107,10,"outputRange"],[123,23,107,21],[123,25,107,23],[123,26,107,24],[123,27,107,25],[123,29,107,27],[123,30,107,28],[123,32,107,30],[123,33,107,31],[124,10,108,8],[124,11,108,9],[124,12,108,10],[125,10,109,8,"translationX"],[125,22,109,20],[125,25,109,23,"Animated"],[125,42,109,31],[125,43,109,32,"add"],[125,46,109,35],[125,47,109,36,"dragX"],[125,52,109,41],[125,54,109,43,"dragOffsetFromOnStartPosition"],[125,83,109,72],[125,84,109,73],[125,85,109,74],[125,86,109,75],[126,8,110,6],[127,8,112,6],[127,12,112,10],[127,13,112,11,"openValue"],[127,22,112,20],[127,25,112,23,"Animated"],[127,42,112,31],[127,43,112,32,"add"],[127,46,112,35],[127,47,112,36,"translationX"],[127,59,112,48],[127,61,112,50,"drawerTranslation"],[127,78,112,67],[127,79,112,68],[127,80,112,69,"interpolate"],[127,91,112,80],[127,92,112,81],[128,10,113,8,"inputRange"],[128,20,113,18],[128,22,113,20],[128,23,113,21],[128,24,113,22],[128,26,113,24,"drawerWidth"],[128,37,113,35],[128,38,113,36],[129,10,114,8,"outputRange"],[129,21,114,19],[129,23,114,21],[129,24,114,22],[129,25,114,23],[129,27,114,25],[129,28,114,26],[129,29,114,27],[130,10,115,8,"extrapolate"],[130,21,115,19],[130,23,115,21],[131,8,116,6],[131,9,116,7],[131,10,116,8],[132,8,117,6],[132,14,117,12,"gestureOptions"],[132,28,117,26],[132,31,117,29],[133,10,118,8,"useNativeDriver"],[133,25,118,23],[133,27,118,25,"props"],[133,32,118,30],[133,33,118,31,"useNativeAnimations"],[134,8,119,6],[134,9,119,7],[135,8,121,6],[135,12,121,10],[135,16,121,14],[135,17,121,15,"props"],[135,22,121,20],[135,23,121,21,"onDrawerSlide"],[135,36,121,34],[135,38,121,36],[136,10,122,8,"gestureOptions"],[136,24,122,22],[136,25,122,23,"listener"],[136,33,122,31],[136,36,122,34,"ev"],[136,38,122,36],[136,42,122,40],[137,12,123,10],[137,16,123,14,"_this$props$onDrawerS"],[137,37,123,35],[137,39,123,37,"_this$props"],[137,50,123,48],[138,12,125,10],[138,18,125,16,"translationX"],[138,30,125,28],[138,33,125,31,"Math"],[138,37,125,35],[138,38,125,36,"floor"],[138,43,125,41],[138,44,125,42,"Math"],[138,48,125,46],[138,49,125,47,"abs"],[138,52,125,50],[138,53,125,51,"ev"],[138,55,125,53],[138,56,125,54,"nativeEvent"],[138,67,125,65],[138,68,125,66,"translationX"],[138,80,125,78],[138,81,125,79],[138,82,125,80],[139,12,126,10],[139,18,126,16,"position"],[139,26,126,24],[139,29,126,27,"translationX"],[139,41,126,39],[139,44,126,42],[139,48,126,46],[139,49,126,47,"state"],[139,54,126,52],[139,55,126,53,"containerWidth"],[139,69,126,67],[140,12,127,10],[140,13,127,11,"_this$props$onDrawerS"],[140,34,127,32],[140,37,127,35],[140,38,127,36,"_this$props"],[140,49,127,47],[140,52,127,50],[140,56,127,54],[140,57,127,55,"props"],[140,62,127,60],[140,64,127,62,"onDrawerSlide"],[140,77,127,75],[140,83,127,81],[140,87,127,85],[140,91,127,89,"_this$props$onDrawerS"],[140,112,127,110],[140,117,127,115],[140,122,127,120],[140,123,127,121],[140,126,127,124],[140,131,127,129],[140,132,127,130],[140,135,127,133,"_this$props$onDrawerS"],[140,156,127,154],[140,157,127,155,"call"],[140,161,127,159],[140,162,127,160,"_this$props"],[140,173,127,171],[140,175,127,173,"position"],[140,183,127,181],[140,184,127,182],[141,10,128,8],[141,11,128,9],[142,8,129,6],[143,8,131,6],[143,12,131,10],[143,13,131,11,"onGestureEvent"],[143,27,131,25],[143,30,131,28,"Animated"],[143,47,131,36],[143,48,131,37,"event"],[143,53,131,42],[143,54,131,43],[143,55,131,44],[144,10,132,8,"nativeEvent"],[144,21,132,19],[144,23,132,21],[145,12,133,10,"translationX"],[145,24,133,22],[145,26,133,24,"dragXValue"],[145,36,133,34],[146,12,134,10,"x"],[146,13,134,11],[146,15,134,13,"touchXValue"],[147,10,135,8],[148,8,136,6],[148,9,136,7],[148,10,136,8],[148,12,136,10,"gestureOptions"],[148,26,136,24],[148,27,136,25],[149,6,137,4],[149,7,137,5],[149,8,137,6],[150,6,139,4,"_defineProperty"],[150,21,139,19],[150,22,139,20],[150,26,139,24],[150,28,139,26],[150,51,139,49],[150,53,139,51],[150,54,139,52],[151,8,140,6,"nativeEvent"],[152,6,141,4],[152,7,141,5],[152,12,141,10],[153,8,142,6],[153,12,142,10],[153,13,142,11,"setState"],[153,21,142,19],[153,22,142,20],[154,10,143,8,"containerWidth"],[154,24,143,22],[154,26,143,24,"nativeEvent"],[154,37,143,35],[154,38,143,36,"layout"],[154,44,143,42],[154,45,143,43,"width"],[155,8,144,6],[155,9,144,7],[155,10,144,8],[156,6,145,4],[156,7,145,5],[156,8,145,6],[157,6,147,4,"_defineProperty"],[157,21,147,19],[157,22,147,20],[157,26,147,24],[157,28,147,26],[157,46,147,44],[157,48,147,46],[157,49,147,47,"newState"],[157,57,147,55],[157,59,147,57,"drawerWillShow"],[157,73,147,71],[157,78,147,76],[158,8,148,6],[158,12,148,10,"_this$props$onDrawerS2"],[158,34,148,32],[158,36,148,34,"_this$props2"],[158,48,148,46],[159,8,150,6],[159,9,150,7,"_this$props$onDrawerS2"],[159,31,150,29],[159,34,150,32],[159,35,150,33,"_this$props2"],[159,47,150,45],[159,50,150,48],[159,54,150,52],[159,55,150,53,"props"],[159,60,150,58],[159,62,150,60,"onDrawerStateChanged"],[159,82,150,80],[159,88,150,86],[159,92,150,90],[159,96,150,94,"_this$props$onDrawerS2"],[159,118,150,116],[159,123,150,121],[159,128,150,126],[159,129,150,127],[159,132,150,130],[159,137,150,135],[159,138,150,136],[159,141,150,139,"_this$props$onDrawerS2"],[159,163,150,161],[159,164,150,162,"call"],[159,168,150,166],[159,169,150,167,"_this$props2"],[159,181,150,179],[159,183,150,181,"newState"],[159,191,150,189],[159,193,150,191,"drawerWillShow"],[159,207,150,205],[159,208,150,206],[160,6,151,4],[160,7,151,5],[160,8,151,6],[161,6,153,4,"_defineProperty"],[161,21,153,19],[161,22,153,20],[161,26,153,24],[161,28,153,26],[161,55,153,53],[161,57,153,55],[161,58,153,56],[162,8,154,6,"nativeEvent"],[163,6,155,4],[163,7,155,5],[163,12,155,10],[164,8,156,6],[164,12,156,10,"nativeEvent"],[164,23,156,21],[164,24,156,22,"oldState"],[164,32,156,30],[164,37,156,35,"State"],[164,49,156,40],[164,50,156,41,"ACTIVE"],[164,56,156,47],[164,58,156,49],[165,10,157,8],[165,14,157,12],[165,15,157,13,"handleRelease"],[165,28,157,26],[165,29,157,27],[166,12,158,10,"nativeEvent"],[167,10,159,8],[167,11,159,9],[167,12,159,10],[168,8,160,6],[168,9,160,7],[168,15,160,13],[168,19,160,17,"nativeEvent"],[168,30,160,28],[168,31,160,29,"state"],[168,36,160,34],[168,41,160,39,"State"],[168,53,160,44],[168,54,160,45,"ACTIVE"],[168,60,160,51],[168,62,160,53],[169,10,161,8],[169,14,161,12],[169,15,161,13,"emitStateChanged"],[169,31,161,29],[169,32,161,30,"DRAGGING"],[169,40,161,38],[169,42,161,40],[169,47,161,45],[169,48,161,46],[170,10,162,8],[170,14,162,12],[170,15,162,13,"setState"],[170,23,162,21],[170,24,162,22],[171,12,163,10,"drawerState"],[171,23,163,21],[171,25,163,23,"DRAGGING"],[172,10,164,8],[172,11,164,9],[172,12,164,10],[173,10,166,8],[173,14,166,12],[173,18,166,16],[173,19,166,17,"props"],[173,24,166,22],[173,25,166,23,"keyboardDismissMode"],[173,44,166,42],[173,49,166,47],[173,58,166,56],[173,60,166,58],[174,12,167,10,"Keyboard"],[174,29,167,18],[174,30,167,19,"dismiss"],[174,37,167,26],[174,38,167,27],[174,39,167,28],[175,10,168,8],[176,10,170,8],[176,14,170,12],[176,18,170,16],[176,19,170,17,"props"],[176,24,170,22],[176,25,170,23,"hideStatusBar"],[176,38,170,36],[176,40,170,38],[177,12,171,10,"StatusBar"],[177,30,171,19],[177,31,171,20,"setHidden"],[177,40,171,29],[177,41,171,30],[177,45,171,34],[177,47,171,36],[177,51,171,40],[177,52,171,41,"props"],[177,57,171,46],[177,58,171,47,"statusBarAnimation"],[177,76,171,65],[177,80,171,69],[177,87,171,76],[177,88,171,77],[178,10,172,8],[179,8,173,6],[180,6,174,4],[180,7,174,5],[180,8,174,6],[181,6,176,4,"_defineProperty"],[181,21,176,19],[181,22,176,20],[181,26,176,24],[181,28,176,26],[181,53,176,51],[181,55,176,53],[181,56,176,54],[182,8,177,6,"nativeEvent"],[183,6,178,4],[183,7,178,5],[183,12,178,10],[184,8,179,6],[184,12,179,10],[184,16,179,14],[184,17,179,15,"drawerShown"],[184,28,179,26],[184,32,179,30,"nativeEvent"],[184,43,179,41],[184,44,179,42,"oldState"],[184,52,179,50],[184,57,179,55,"State"],[184,69,179,60],[184,70,179,61,"ACTIVE"],[184,76,179,67],[184,80,179,71],[184,84,179,75],[184,85,179,76,"props"],[184,90,179,81],[184,91,179,82,"drawerLockMode"],[184,105,179,96],[184,110,179,101],[184,123,179,114],[184,125,179,116],[185,10,180,8],[185,14,180,12],[185,15,180,13,"closeDrawer"],[185,26,180,24],[185,27,180,25],[185,28,180,26],[186,8,181,6],[187,6,182,4],[187,7,182,5],[187,8,182,6],[188,6,184,4,"_defineProperty"],[188,21,184,19],[188,22,184,20],[188,26,184,24],[188,28,184,26],[188,43,184,41],[188,45,184,43],[188,46,184,44],[189,8,185,6,"nativeEvent"],[190,6,186,4],[190,7,186,5],[190,12,186,10],[191,8,187,6],[191,14,187,12],[192,10,188,8,"drawerWidth"],[192,21,188,19],[193,10,189,8,"drawerPosition"],[193,24,189,22],[194,10,190,8,"drawerType"],[195,8,191,6],[195,9,191,7],[195,12,191,10],[195,16,191,14],[195,17,191,15,"props"],[195,22,191,20],[196,8,192,6],[196,14,192,12],[197,10,193,8,"containerWidth"],[198,8,194,6],[198,9,194,7],[198,12,194,10],[198,16,194,14],[198,17,194,15,"state"],[198,22,194,20],[199,8,195,6],[199,12,195,10],[200,10,196,8,"translationX"],[200,22,196,20],[200,24,196,22,"dragX"],[200,29,196,27],[201,10,197,8,"velocityX"],[201,19,197,17],[202,10,198,8,"x"],[202,11,198,9],[202,13,198,11,"touchX"],[203,8,199,6],[203,9,199,7],[203,12,199,10,"nativeEvent"],[203,23,199,21],[204,8,201,6],[204,12,201,10,"drawerPosition"],[204,26,201,24],[204,31,201,29],[204,37,201,35],[204,39,201,37],[205,10,202,8],[206,10,203,8],[207,10,204,8,"dragX"],[207,15,204,13],[207,18,204,16],[207,19,204,17,"dragX"],[207,24,204,22],[208,10,205,8,"touchX"],[208,16,205,14],[208,19,205,17,"containerWidth"],[208,33,205,31],[208,36,205,34,"touchX"],[208,42,205,40],[209,10,206,8,"velocityX"],[209,19,206,17],[209,22,206,20],[209,23,206,21,"velocityX"],[209,32,206,30],[210,8,207,6],[211,8,209,6],[211,14,209,12,"gestureStartX"],[211,27,209,25],[211,30,209,28,"touchX"],[211,36,209,34],[211,39,209,37,"dragX"],[211,44,209,42],[212,8,210,6],[212,12,210,10,"dragOffsetBasedOnStart"],[212,34,210,32],[212,37,210,35],[212,38,210,36],[213,8,212,6],[213,12,212,10,"drawerType"],[213,22,212,20],[213,27,212,25],[213,34,212,32],[213,36,212,34],[214,10,213,8,"dragOffsetBasedOnStart"],[214,32,213,30],[214,35,213,33,"gestureStartX"],[214,48,213,46],[214,51,213,49,"drawerWidth"],[214,62,213,60],[214,65,213,63,"gestureStartX"],[214,78,213,76],[214,81,213,79,"drawerWidth"],[214,92,213,90],[214,95,213,93],[214,96,213,94],[215,8,214,6],[216,8,216,6],[216,14,216,12,"startOffsetX"],[216,26,216,24],[216,29,216,27,"dragX"],[216,34,216,32],[216,37,216,35,"dragOffsetBasedOnStart"],[216,59,216,57],[216,63,216,61],[216,67,216,65],[216,68,216,66,"drawerShown"],[216,79,216,77],[216,82,216,80,"drawerWidth"],[216,93,216,91],[216,96,216,94],[216,97,216,95],[216,98,216,96],[217,8,217,6],[217,14,217,12,"projOffsetX"],[217,25,217,23],[217,28,217,26,"startOffsetX"],[217,40,217,38],[217,43,217,41,"DRAG_TOSS"],[217,52,217,50],[217,55,217,53,"velocityX"],[217,64,217,62],[218,8,218,6],[218,14,218,12,"shouldOpen"],[218,24,218,22],[218,27,218,25,"projOffsetX"],[218,38,218,36],[218,41,218,39,"drawerWidth"],[218,52,218,50],[218,55,218,53],[218,56,218,54],[219,8,220,6],[219,12,220,10,"shouldOpen"],[219,22,220,20],[219,24,220,22],[220,10,221,8],[220,14,221,12],[220,15,221,13,"animateDrawer"],[220,28,221,26],[220,29,221,27,"startOffsetX"],[220,41,221,39],[220,43,221,41,"drawerWidth"],[220,54,221,52],[220,56,221,54,"velocityX"],[220,65,221,63],[220,66,221,64],[221,8,222,6],[221,9,222,7],[221,15,222,13],[222,10,223,8],[222,14,223,12],[222,15,223,13,"animateDrawer"],[222,28,223,26],[222,29,223,27,"startOffsetX"],[222,41,223,39],[222,43,223,41],[222,44,223,42],[222,46,223,44,"velocityX"],[222,55,223,53],[222,56,223,54],[223,8,224,6],[224,6,225,4],[224,7,225,5],[224,8,225,6],[225,6,227,4,"_defineProperty"],[225,21,227,19],[225,22,227,20],[225,26,227,24],[225,28,227,26],[225,43,227,41],[225,45,227,43,"showing"],[225,52,227,50],[225,56,227,54],[226,8,228,6],[226,12,228,10,"_this$accessibilityIs"],[226,33,228,31],[226,35,228,33,"_this$pointerEventsVi"],[226,56,228,54],[226,58,228,56,"_this$panGestureHandl"],[226,79,228,77],[227,8,230,6],[227,12,230,10],[227,13,230,11,"drawerShown"],[227,24,230,22],[227,27,230,25,"showing"],[227,34,230,32],[228,8,231,6],[228,9,231,7,"_this$accessibilityIs"],[228,30,231,28],[228,33,231,31],[228,37,231,35],[228,38,231,36,"accessibilityIsModalView"],[228,62,231,60],[228,63,231,61,"current"],[228,70,231,68],[228,76,231,74],[228,80,231,78],[228,84,231,82,"_this$accessibilityIs"],[228,105,231,103],[228,110,231,108],[228,115,231,113],[228,116,231,114],[228,119,231,117],[228,124,231,122],[228,125,231,123],[228,128,231,126,"_this$accessibilityIs"],[228,149,231,147],[228,150,231,148,"setNativeProps"],[228,164,231,162],[228,165,231,163],[229,10,232,8,"accessibilityViewIsModal"],[229,34,232,32],[229,36,232,34,"showing"],[230,8,233,6],[230,9,233,7],[230,10,233,8],[231,8,234,6],[231,9,234,7,"_this$pointerEventsVi"],[231,30,234,28],[231,33,234,31],[231,37,234,35],[231,38,234,36,"pointerEventsView"],[231,55,234,53],[231,56,234,54,"current"],[231,63,234,61],[231,69,234,67],[231,73,234,71],[231,77,234,75,"_this$pointerEventsVi"],[231,98,234,96],[231,103,234,101],[231,108,234,106],[231,109,234,107],[231,112,234,110],[231,117,234,115],[231,118,234,116],[231,121,234,119,"_this$pointerEventsVi"],[231,142,234,140],[231,143,234,141,"setNativeProps"],[231,157,234,155],[231,158,234,156],[232,10,235,8,"pointerEvents"],[232,23,235,21],[232,25,235,23,"showing"],[232,32,235,30],[232,35,235,33],[232,41,235,39],[232,44,235,42],[233,8,236,6],[233,9,236,7],[233,10,236,8],[234,8,237,6],[234,14,237,12],[235,10,238,8,"drawerPosition"],[235,24,238,22],[236,10,239,8,"minSwipeDistance"],[236,26,239,24],[237,10,240,8,"edgeWidth"],[238,8,241,6],[238,9,241,7],[238,12,241,10],[238,16,241,14],[238,17,241,15,"props"],[238,22,241,20],[239,8,242,6],[239,14,242,12,"fromLeft"],[239,22,242,20],[239,25,242,23,"drawerPosition"],[239,39,242,37],[239,44,242,42],[239,50,242,48],[239,51,242,49],[239,52,242,50],[240,8,243,6],[241,8,244,6],[243,8,246,6],[243,14,246,12,"gestureOrientation"],[243,32,246,30],[243,35,246,33],[243,36,246,34,"fromLeft"],[243,44,246,42],[243,47,246,45],[243,48,246,46],[243,51,246,49],[243,52,246,50],[243,53,246,51],[243,58,246,56],[243,62,246,60],[243,63,246,61,"drawerShown"],[243,74,246,72],[243,77,246,75],[243,78,246,76],[243,79,246,77],[243,82,246,80],[243,83,246,81],[243,84,246,82],[243,85,246,83],[243,86,246,84],[244,8,247,6],[245,8,248,6],[247,8,250,6],[247,14,250,12,"hitSlop"],[247,21,250,19],[247,24,250,22,"fromLeft"],[247,32,250,30],[247,35,250,33],[248,10,251,8,"left"],[248,14,251,12],[248,16,251,14],[248,17,251,15],[249,10,252,8,"width"],[249,15,252,13],[249,17,252,15,"showing"],[249,24,252,22],[249,27,252,25,"undefined"],[249,36,252,34],[249,39,252,37,"edgeWidth"],[250,8,253,6],[250,9,253,7],[250,12,253,10],[251,10,254,8,"right"],[251,15,254,13],[251,17,254,15],[251,18,254,16],[252,10,255,8,"width"],[252,15,255,13],[252,17,255,15,"showing"],[252,24,255,22],[252,27,255,25,"undefined"],[252,36,255,34],[252,39,255,37,"edgeWidth"],[253,8,256,6],[253,9,256,7],[253,10,256,8],[253,11,256,9],[255,8,258,6],[255,9,258,7,"_this$panGestureHandl"],[255,30,258,28],[255,33,258,31],[255,37,258,35],[255,38,258,36,"panGestureHandler"],[255,55,258,53],[255,56,258,54,"current"],[255,63,258,61],[255,69,258,67],[255,73,258,71],[255,77,258,75,"_this$panGestureHandl"],[255,98,258,96],[255,103,258,101],[255,108,258,106],[255,109,258,107],[255,112,258,110],[255,117,258,115],[255,118,258,116],[255,121,258,119,"_this$panGestureHandl"],[255,142,258,140],[255,143,258,141,"setNativeProps"],[255,157,258,155],[255,158,258,156],[256,10,259,8,"hitSlop"],[256,17,259,15],[257,10,260,8,"activeOffsetX"],[257,23,260,21],[257,25,260,23,"gestureOrientation"],[257,43,260,41],[257,46,260,44,"minSwipeDistance"],[258,8,261,6],[258,9,261,7],[258,10,261,8],[259,6,262,4],[259,7,262,5],[259,8,262,6],[260,6,264,4,"_defineProperty"],[260,21,264,19],[260,22,264,20],[260,26,264,24],[260,28,264,26],[260,43,264,41],[260,45,264,43],[260,46,264,44,"fromValue"],[260,55,264,53],[260,57,264,55,"toValue"],[260,64,264,62],[260,66,264,64,"velocity"],[260,74,264,72],[260,76,264,74,"speed"],[260,81,264,79],[260,86,264,84],[261,8,265,6],[261,12,265,10],[261,13,265,11,"state"],[261,18,265,16],[261,19,265,17,"dragX"],[261,24,265,22],[261,25,265,23,"setValue"],[261,33,265,31],[261,34,265,32],[261,35,265,33],[261,36,265,34],[262,8,266,6],[262,12,266,10],[262,13,266,11,"state"],[262,18,266,16],[262,19,266,17,"touchX"],[262,25,266,23],[262,26,266,24,"setValue"],[262,34,266,32],[262,35,266,33],[262,39,266,37],[262,40,266,38,"props"],[262,45,266,43],[262,46,266,44,"drawerPosition"],[262,60,266,58],[262,65,266,63],[262,71,266,69],[262,74,266,72],[262,75,266,73],[262,78,266,76],[262,82,266,80],[262,83,266,81,"state"],[262,88,266,86],[262,89,266,87,"containerWidth"],[262,103,266,101],[262,104,266,102],[263,8,268,6],[263,12,268,10,"fromValue"],[263,21,268,19],[263,25,268,23],[263,29,268,27],[263,31,268,29],[264,10,269,8],[264,14,269,12,"nextFramePosition"],[264,31,269,29],[264,34,269,32,"fromValue"],[264,43,269,41],[265,10,271,8],[265,14,271,12],[265,18,271,16],[265,19,271,17,"props"],[265,24,271,22],[265,25,271,23,"useNativeAnimations"],[265,44,271,42],[265,46,271,44],[266,12,272,10],[267,12,273,10],[268,12,274,10],[269,12,275,10],[270,12,276,10],[270,16,276,14,"fromValue"],[270,25,276,23],[270,28,276,26,"toValue"],[270,35,276,33],[270,39,276,37,"velocity"],[270,47,276,45],[270,50,276,48],[270,51,276,49],[270,53,276,51],[271,14,277,12,"nextFramePosition"],[271,31,277,29],[271,34,277,32,"Math"],[271,38,277,36],[271,39,277,37,"min"],[271,42,277,40],[271,43,277,41,"fromValue"],[271,52,277,50],[271,55,277,53,"velocity"],[271,63,277,61],[271,66,277,64],[271,70,277,68],[271,72,277,70,"toValue"],[271,79,277,77],[271,80,277,78],[272,12,278,10],[272,13,278,11],[272,19,278,17],[272,23,278,21,"fromValue"],[272,32,278,30],[272,35,278,33,"toValue"],[272,42,278,40],[272,46,278,44,"velocity"],[272,54,278,52],[272,57,278,55],[272,58,278,56],[272,60,278,58],[273,14,279,12,"nextFramePosition"],[273,31,279,29],[273,34,279,32,"Math"],[273,38,279,36],[273,39,279,37,"max"],[273,42,279,40],[273,43,279,41,"fromValue"],[273,52,279,50],[273,55,279,53,"velocity"],[273,63,279,61],[273,66,279,64],[273,70,279,68],[273,72,279,70,"toValue"],[273,79,279,77],[273,80,279,78],[274,12,280,10],[275,10,281,8],[276,10,283,8],[276,14,283,12],[276,15,283,13,"state"],[276,20,283,18],[276,21,283,19,"drawerTranslation"],[276,38,283,36],[276,39,283,37,"setValue"],[276,47,283,45],[276,48,283,46,"nextFramePosition"],[276,65,283,63],[276,66,283,64],[277,8,284,6],[278,8,286,6],[278,14,286,12,"willShow"],[278,22,286,20],[278,25,286,23,"toValue"],[278,32,286,30],[278,37,286,35],[278,38,286,36],[279,8,287,6],[279,12,287,10],[279,13,287,11,"updateShowing"],[279,26,287,24],[279,27,287,25,"willShow"],[279,35,287,33],[279,36,287,34],[280,8,288,6],[280,12,288,10],[280,13,288,11,"emitStateChanged"],[280,29,288,27],[280,30,288,28,"SETTLING"],[280,38,288,36],[280,40,288,38,"willShow"],[280,48,288,46],[280,49,288,47],[281,8,289,6],[281,12,289,10],[281,13,289,11,"setState"],[281,21,289,19],[281,22,289,20],[282,10,290,8,"drawerState"],[282,21,290,19],[282,23,290,21,"SETTLING"],[283,8,291,6],[283,9,291,7],[283,10,291,8],[284,8,293,6],[284,12,293,10],[284,16,293,14],[284,17,293,15,"props"],[284,22,293,20],[284,23,293,21,"hideStatusBar"],[284,36,293,34],[284,38,293,36],[285,10,294,8,"StatusBar"],[285,28,294,17],[285,29,294,18,"setHidden"],[285,38,294,27],[285,39,294,28,"willShow"],[285,47,294,36],[285,49,294,38],[285,53,294,42],[285,54,294,43,"props"],[285,59,294,48],[285,60,294,49,"statusBarAnimation"],[285,78,294,67],[285,82,294,71],[285,89,294,78],[285,90,294,79],[286,8,295,6],[287,8,297,6,"Animated"],[287,25,297,14],[287,26,297,15,"spring"],[287,32,297,21],[287,33,297,22],[287,37,297,26],[287,38,297,27,"state"],[287,43,297,32],[287,44,297,33,"drawerTranslation"],[287,61,297,50],[287,63,297,52],[288,10,298,8,"velocity"],[288,18,298,16],[289,10,299,8,"bounciness"],[289,20,299,18],[289,22,299,20],[289,23,299,21],[290,10,300,8,"toValue"],[290,17,300,15],[291,10,301,8,"useNativeDriver"],[291,25,301,23],[291,27,301,25],[291,31,301,29],[291,32,301,30,"props"],[291,37,301,35],[291,38,301,36,"useNativeAnimations"],[291,57,301,55],[292,10,302,8,"speed"],[292,15,302,13],[292,17,302,15,"speed"],[292,22,302,20],[292,27,302,25],[292,31,302,29],[292,35,302,33,"speed"],[292,40,302,38],[292,45,302,43],[292,50,302,48],[292,51,302,49],[292,54,302,52,"speed"],[292,59,302,57],[292,62,302,60,"undefined"],[293,8,303,6],[293,9,303,7],[293,10,303,8],[293,11,303,9,"start"],[293,16,303,14],[293,17,303,15],[293,18,303,16],[294,10,304,8,"finished"],[295,8,305,6],[295,9,305,7],[295,14,305,12],[296,10,306,8],[296,14,306,12,"finished"],[296,22,306,20],[296,24,306,22],[297,12,307,10],[297,16,307,14],[297,17,307,15,"emitStateChanged"],[297,33,307,31],[297,34,307,32,"IDLE"],[297,38,307,36],[297,40,307,38,"willShow"],[297,48,307,46],[297,49,307,47],[298,12,308,10],[298,16,308,14],[298,17,308,15,"setState"],[298,25,308,23],[298,26,308,24],[299,14,309,12,"drawerOpened"],[299,26,309,24],[299,28,309,26,"willShow"],[300,12,310,10],[300,13,310,11],[300,14,310,12],[301,12,312,10],[301,16,312,14],[301,20,312,18],[301,21,312,19,"state"],[301,26,312,24],[301,27,312,25,"drawerState"],[301,38,312,36],[301,43,312,41,"DRAGGING"],[301,51,312,49],[301,53,312,51],[302,14,313,12],[303,14,314,12],[304,14,315,12],[304,18,315,16],[304,19,315,17,"setState"],[304,27,315,25],[304,28,315,26],[305,16,316,14,"drawerState"],[305,27,316,25],[305,29,316,27,"IDLE"],[306,14,317,12],[306,15,317,13],[306,16,317,14],[307,12,318,10],[308,12,320,10],[308,16,320,14,"willShow"],[308,24,320,22],[308,26,320,24],[309,14,321,12],[309,18,321,16,"_this$props$onDrawerO"],[309,39,321,37],[309,41,321,39,"_this$props3"],[309,53,321,51],[310,14,323,12],[310,15,323,13,"_this$props$onDrawerO"],[310,36,323,34],[310,39,323,37],[310,40,323,38,"_this$props3"],[310,52,323,50],[310,55,323,53],[310,59,323,57],[310,60,323,58,"props"],[310,65,323,63],[310,67,323,65,"onDrawerOpen"],[310,79,323,77],[310,85,323,83],[310,89,323,87],[310,93,323,91,"_this$props$onDrawerO"],[310,114,323,112],[310,119,323,117],[310,124,323,122],[310,125,323,123],[310,128,323,126],[310,133,323,131],[310,134,323,132],[310,137,323,135,"_this$props$onDrawerO"],[310,158,323,156],[310,159,323,157,"call"],[310,163,323,161],[310,164,323,162,"_this$props3"],[310,176,323,174],[310,177,323,175],[311,12,324,10],[311,13,324,11],[311,19,324,17],[312,14,325,12],[312,18,325,16,"_this$props$onDrawerC"],[312,39,325,37],[312,41,325,39,"_this$props4"],[312,53,325,51],[313,14,327,12],[313,15,327,13,"_this$props$onDrawerC"],[313,36,327,34],[313,39,327,37],[313,40,327,38,"_this$props4"],[313,52,327,50],[313,55,327,53],[313,59,327,57],[313,60,327,58,"props"],[313,65,327,63],[313,67,327,65,"onDrawerClose"],[313,80,327,78],[313,86,327,84],[313,90,327,88],[313,94,327,92,"_this$props$onDrawerC"],[313,115,327,113],[313,120,327,118],[313,125,327,123],[313,126,327,124],[313,129,327,127],[313,134,327,132],[313,135,327,133],[313,138,327,136,"_this$props$onDrawerC"],[313,159,327,157],[313,160,327,158,"call"],[313,164,327,162],[313,165,327,163,"_this$props4"],[313,177,327,175],[313,178,327,176],[314,12,328,10],[315,10,329,8],[316,8,330,6],[316,9,330,7],[316,10,330,8],[317,6,331,4],[317,7,331,5],[317,8,331,6],[318,6,333,4,"_defineProperty"],[318,21,333,19],[318,22,333,20],[318,26,333,24],[318,28,333,26],[318,40,333,38],[318,42,333,40],[318,43,333,41,"options"],[318,50,333,48],[318,53,333,51],[318,54,333,52],[318,55,333,53],[318,60,333,58],[319,8,334,6],[319,12,334,10],[319,13,334,11,"animateDrawer"],[319,26,334,24],[320,8,334,26],[321,8,335,6,"undefined"],[321,17,335,15],[321,19,335,17],[321,23,335,21],[321,24,335,22,"props"],[321,29,335,27],[321,30,335,28,"drawerWidth"],[321,41,335,39],[321,43,335,41,"options"],[321,50,335,48],[321,51,335,49,"velocity"],[321,59,335,57],[321,62,335,60,"options"],[321,69,335,67],[321,70,335,68,"velocity"],[321,78,335,76],[321,81,335,79],[321,82,335,80],[321,84,335,82,"options"],[321,91,335,89],[321,92,335,90,"speed"],[321,97,335,95],[321,98,335,96],[321,99,335,97],[321,100,335,98],[322,8,336,6],[324,8,338,6],[324,12,338,10],[324,13,338,11,"forceUpdate"],[324,24,338,22],[324,25,338,23],[324,26,338,24],[325,6,339,4],[325,7,339,5],[325,8,339,6],[326,6,341,4,"_defineProperty"],[326,21,341,19],[326,22,341,20],[326,26,341,24],[326,28,341,26],[326,41,341,39],[326,43,341,41],[326,44,341,42,"options"],[326,51,341,49],[326,54,341,52],[326,55,341,53],[326,56,341,54],[326,61,341,59],[327,8,342,6],[328,8,343,6],[328,12,343,10],[328,13,343,11,"animateDrawer"],[328,26,343,24],[328,27,343,25,"undefined"],[328,36,343,34],[328,38,343,36],[328,39,343,37],[328,41,343,39,"options"],[328,48,343,46],[328,49,343,47,"velocity"],[328,57,343,55],[328,60,343,58,"options"],[328,67,343,65],[328,68,343,66,"velocity"],[328,76,343,74],[328,79,343,77],[328,80,343,78],[328,82,343,80,"options"],[328,89,343,87],[328,90,343,88,"speed"],[328,95,343,93],[328,96,343,94],[328,97,343,95],[328,98,343,96],[329,8,344,6],[331,8,346,6],[331,12,346,10],[331,13,346,11,"forceUpdate"],[331,24,346,22],[331,25,346,23],[331,26,346,24],[332,6,347,4],[332,7,347,5],[332,8,347,6],[333,6,349,4,"_defineProperty"],[333,21,349,19],[333,22,349,20],[333,26,349,24],[333,28,349,26],[333,43,349,41],[333,45,349,43],[333,51,349,49],[334,8,350,6],[335,8,351,6],[335,12,351,6,"invariant"],[335,30,351,15],[335,32,351,16],[335,36,351,20],[335,37,351,21,"openValue"],[335,46,351,30],[335,48,351,32],[335,63,351,47],[335,64,351,48],[336,8,352,6],[336,12,352,10,"overlayOpacity"],[336,26,352,24],[337,8,354,6],[337,12,354,10],[337,16,354,14],[337,17,354,15,"state"],[337,22,354,20],[337,23,354,21,"drawerState"],[337,34,354,32],[337,39,354,37,"IDLE"],[337,43,354,41],[337,45,354,43],[338,10,355,8,"overlayOpacity"],[338,24,355,22],[338,27,355,25],[338,31,355,29],[338,32,355,30,"openValue"],[338,41,355,39],[339,8,356,6],[339,9,356,7],[339,15,356,13],[340,10,357,8,"overlayOpacity"],[340,24,357,22],[340,27,357,25],[340,31,357,29],[340,32,357,30,"state"],[340,37,357,35],[340,38,357,36,"drawerOpened"],[340,50,357,48],[340,53,357,51],[340,54,357,52],[340,57,357,55],[340,58,357,56],[341,8,358,6],[342,8,360,6],[342,14,360,12,"dynamicOverlayStyles"],[342,34,360,32],[342,37,360,35],[343,10,361,8,"opacity"],[343,17,361,15],[343,19,361,17,"overlayOpacity"],[343,33,361,31],[344,10,362,8,"backgroundColor"],[344,25,362,23],[344,27,362,25],[344,31,362,29],[344,32,362,30,"props"],[344,37,362,35],[344,38,362,36,"overlayColor"],[345,8,363,6],[345,9,363,7],[346,8,364,6],[346,15,364,13],[346,28,364,26,"_ReactNativeCSSInterop"],[346,50,364,26],[346,51,364,26,"createInteropElement"],[346,71,364,26],[346,72,364,46,"TapGestureHandler"],[346,108,364,63],[346,110,364,65],[347,10,365,8,"onHandlerStateChange"],[347,30,365,28],[347,32,365,30],[347,36,365,34],[347,37,365,35,"onTapHandlerStateChange"],[348,8,366,6],[348,9,366,7],[348,11,366,9],[348,24,366,22,"_ReactNativeCSSInterop"],[348,46,366,22],[348,47,366,22,"createInteropElement"],[348,67,366,22],[348,68,366,42,"Animated"],[348,85,366,50],[348,86,366,51,"View"],[348,90,366,55],[348,92,366,57],[349,10,367,8,"pointerEvents"],[349,23,367,21],[349,25,367,23],[349,29,367,27],[349,30,367,28,"drawerShown"],[349,41,367,39],[349,44,367,42],[349,50,367,48],[349,53,367,51],[349,59,367,57],[350,10,368,8,"ref"],[350,13,368,11],[350,15,368,13],[350,19,368,17],[350,20,368,18,"pointerEventsView"],[350,37,368,35],[351,10,369,8,"style"],[351,15,369,13],[351,17,369,15],[351,18,369,16,"styles"],[351,24,369,22],[351,25,369,23,"overlay"],[351,32,369,30],[351,34,369,32,"dynamicOverlayStyles"],[351,54,369,52],[352,8,370,6],[352,9,370,7],[352,10,370,8],[352,11,370,9],[353,6,371,4],[353,7,371,5],[353,8,371,6],[354,6,373,4,"_defineProperty"],[354,21,373,19],[354,22,373,20],[354,26,373,24],[354,28,373,26],[354,42,373,40],[354,44,373,42],[354,50,373,48],[355,8,374,6],[355,14,374,12],[356,10,375,8,"drawerBackgroundColor"],[356,31,375,29],[357,10,376,8,"drawerWidth"],[357,21,376,19],[358,10,377,8,"drawerPosition"],[358,24,377,22],[359,10,378,8,"drawerType"],[359,20,378,18],[360,10,379,8,"drawerContainerStyle"],[360,30,379,28],[361,10,380,8,"contentContainerStyle"],[362,8,381,6],[362,9,381,7],[362,12,381,10],[362,16,381,14],[362,17,381,15,"props"],[362,22,381,20],[363,8,382,6],[363,14,382,12,"fromLeft"],[363,22,382,20],[363,25,382,23,"drawerPosition"],[363,39,382,37],[363,44,382,42],[363,50,382,48],[364,8,383,6],[364,14,383,12,"drawerSlide"],[364,25,383,23],[364,28,383,26,"drawerType"],[364,38,383,36],[364,43,383,41],[364,49,383,47],[365,8,384,6],[365,14,384,12,"containerSlide"],[365,28,384,26],[365,31,384,29,"drawerType"],[365,41,384,39],[365,46,384,44],[365,53,384,51],[365,54,384,52],[365,55,384,53],[366,8,385,6],[367,8,386,6],[368,8,387,6],[370,8,389,6],[370,14,389,12,"reverseContentDirection"],[370,37,389,35],[370,40,389,38,"I18nManager"],[370,60,389,49],[370,61,389,50,"isRTL"],[370,66,389,55],[370,69,389,58,"fromLeft"],[370,77,389,66],[370,80,389,69],[370,81,389,70,"fromLeft"],[370,89,389,78],[371,8,390,6],[371,14,390,12,"dynamicDrawerStyles"],[371,33,390,31],[371,36,390,34],[372,10,391,8,"backgroundColor"],[372,25,391,23],[372,27,391,25,"drawerBackgroundColor"],[372,48,391,46],[373,10,392,8,"width"],[373,15,392,13],[373,17,392,15,"drawerWidth"],[374,8,393,6],[374,9,393,7],[375,8,394,6],[375,14,394,12,"openValue"],[375,23,394,21],[375,26,394,24],[375,30,394,28],[375,31,394,29,"openValue"],[375,40,394,38],[376,8,395,6],[376,12,395,6,"invariant"],[376,30,395,15],[376,32,395,16,"openValue"],[376,41,395,25],[376,43,395,27],[376,58,395,42],[376,59,395,43],[377,8,396,6],[377,12,396,10,"containerStyles"],[377,27,396,25],[378,8,398,6],[378,12,398,10,"containerSlide"],[378,26,398,24],[378,28,398,26],[379,10,399,8],[379,16,399,14,"containerTranslateX"],[379,35,399,33],[379,38,399,36,"openValue"],[379,47,399,45],[379,48,399,46,"interpolate"],[379,59,399,57],[379,60,399,58],[380,12,400,10,"inputRange"],[380,22,400,20],[380,24,400,22],[380,25,400,23],[380,26,400,24],[380,28,400,26],[380,29,400,27],[380,30,400,28],[381,12,401,10,"outputRange"],[381,23,401,21],[381,25,401,23,"fromLeft"],[381,33,401,31],[381,36,401,34],[381,37,401,35],[381,38,401,36],[381,40,401,38,"drawerWidth"],[381,51,401,49],[381,52,401,50],[381,55,401,53],[381,56,401,54],[381,57,401,55],[381,59,401,57],[381,60,401,58,"drawerWidth"],[381,71,401,69],[381,72,401,70],[382,12,402,10,"extrapolate"],[382,23,402,21],[382,25,402,23],[383,10,403,8],[383,11,403,9],[383,12,403,10],[384,10,404,8,"containerStyles"],[384,25,404,23],[384,28,404,26],[385,12,405,10,"transform"],[385,21,405,19],[385,23,405,21],[385,24,405,22],[386,14,406,12,"translateX"],[386,24,406,22],[386,26,406,24,"containerTranslateX"],[387,12,407,10],[387,13,407,11],[388,10,408,8],[388,11,408,9],[389,8,409,6],[390,8,411,6],[390,12,411,10,"drawerTranslateX"],[390,28,411,26],[390,31,411,29],[390,32,411,30],[391,8,413,6],[391,12,413,10,"drawerSlide"],[391,23,413,21],[391,25,413,23],[392,10,414,8],[392,16,414,14,"closedDrawerOffset"],[392,34,414,32],[392,37,414,35,"fromLeft"],[392,45,414,43],[392,48,414,46],[392,49,414,47,"drawerWidth"],[392,60,414,58],[392,63,414,61,"drawerWidth"],[392,74,414,72],[393,10,416,8],[393,14,416,12],[393,18,416,16],[393,19,416,17,"state"],[393,24,416,22],[393,25,416,23,"drawerState"],[393,36,416,34],[393,41,416,39,"IDLE"],[393,45,416,43],[393,47,416,45],[394,12,417,10,"drawerTranslateX"],[394,28,417,26],[394,31,417,29,"openValue"],[394,40,417,38],[394,41,417,39,"interpolate"],[394,52,417,50],[394,53,417,51],[395,14,418,12,"inputRange"],[395,24,418,22],[395,26,418,24],[395,27,418,25],[395,28,418,26],[395,30,418,28],[395,31,418,29],[395,32,418,30],[396,14,419,12,"outputRange"],[396,25,419,23],[396,27,419,25],[396,28,419,26,"closedDrawerOffset"],[396,46,419,44],[396,48,419,46],[396,49,419,47],[396,50,419,48],[397,14,420,12,"extrapolate"],[397,25,420,23],[397,27,420,25],[398,12,421,10],[398,13,421,11],[398,14,421,12],[399,10,422,8],[399,11,422,9],[399,17,422,15],[400,12,423,10,"drawerTranslateX"],[400,28,423,26],[400,31,423,29],[400,35,423,33],[400,36,423,34,"state"],[400,41,423,39],[400,42,423,40,"drawerOpened"],[400,54,423,52],[400,57,423,55],[400,58,423,56],[400,61,423,59,"closedDrawerOffset"],[400,79,423,77],[401,10,424,8],[402,8,425,6],[403,8,427,6],[403,14,427,12,"drawerStyles"],[403,26,427,24],[403,29,427,27],[404,10,428,8,"transform"],[404,19,428,17],[404,21,428,19],[404,22,428,20],[405,12,429,10,"translateX"],[405,22,429,20],[405,24,429,22,"drawerTranslateX"],[406,10,430,8],[406,11,430,9],[406,12,430,10],[407,10,431,8,"flexDirection"],[407,23,431,21],[407,25,431,23,"reverseContentDirection"],[407,48,431,46],[407,51,431,49],[407,64,431,62],[407,67,431,65],[408,8,432,6],[408,9,432,7],[409,8,433,6],[409,15,433,13],[409,28,433,26,"_ReactNativeCSSInterop"],[409,50,433,26],[409,51,433,26,"createInteropElement"],[409,71,433,26],[409,72,433,46,"Animated"],[409,89,433,54],[409,90,433,55,"View"],[409,94,433,59],[409,96,433,61],[410,10,434,8,"style"],[410,15,434,13],[410,17,434,15,"styles"],[410,23,434,21],[410,24,434,22,"main"],[410,28,434,26],[411,10,435,8,"onLayout"],[411,18,435,16],[411,20,435,18],[411,24,435,22],[411,25,435,23,"handleContainerLayout"],[412,8,436,6],[412,9,436,7],[412,11,436,9],[412,24,436,22,"_ReactNativeCSSInterop"],[412,46,436,22],[412,47,436,22,"createInteropElement"],[412,67,436,22],[412,68,436,42,"Animated"],[412,85,436,50],[412,86,436,51,"View"],[412,90,436,55],[412,92,436,57],[413,10,437,8,"style"],[413,15,437,13],[413,17,437,15],[413,18,437,16,"drawerType"],[413,28,437,26],[413,33,437,31],[413,40,437,38],[413,43,437,41,"styles"],[413,49,437,47],[413,50,437,48,"containerOnBack"],[413,65,437,63],[413,68,437,66,"styles"],[413,74,437,72],[413,75,437,73,"containerInFront"],[413,91,437,89],[413,93,437,91,"containerStyles"],[413,108,437,106],[413,110,437,108,"contentContainerStyle"],[413,131,437,129],[413,132,437,130],[414,10,438,8,"importantForAccessibility"],[414,35,438,33],[414,37,438,35],[414,41,438,39],[414,42,438,40,"drawerShown"],[414,53,438,51],[414,56,438,54],[414,77,438,75],[414,80,438,78],[415,8,439,6],[415,9,439,7],[415,11,439,9],[415,18,439,16],[415,22,439,20],[415,23,439,21,"props"],[415,28,439,26],[415,29,439,27,"children"],[415,37,439,35],[415,42,439,40],[415,52,439,50],[415,55,439,53],[415,59,439,57],[415,60,439,58,"props"],[415,65,439,63],[415,66,439,64,"children"],[415,74,439,72],[415,75,439,73],[415,79,439,77],[415,80,439,78,"openValue"],[415,89,439,87],[415,90,439,88],[415,93,439,91],[415,97,439,95],[415,98,439,96,"props"],[415,103,439,101],[415,104,439,102,"children"],[415,112,439,110],[415,114,439,112],[415,118,439,116],[415,119,439,117,"renderOverlay"],[415,132,439,130],[415,133,439,131],[415,134,439,132],[415,135,439,133],[415,137,439,135],[415,150,439,148,"_ReactNativeCSSInterop"],[415,172,439,148],[415,173,439,148,"createInteropElement"],[415,193,439,148],[415,194,439,168,"Animated"],[415,211,439,176],[415,212,439,177,"View"],[415,216,439,181],[415,218,439,183],[416,10,440,8,"pointerEvents"],[416,23,440,21],[416,25,440,23],[416,35,440,33],[417,10,441,8,"ref"],[417,13,441,11],[417,15,441,13],[417,19,441,17],[417,20,441,18,"accessibilityIsModalView"],[417,44,441,42],[418,10,442,8,"accessibilityViewIsModal"],[418,34,442,32],[418,36,442,34],[418,40,442,38],[418,41,442,39,"drawerShown"],[418,52,442,50],[419,10,443,8,"style"],[419,15,443,13],[419,17,443,15],[419,18,443,16,"styles"],[419,24,443,22],[419,25,443,23,"drawerContainer"],[419,40,443,38],[419,42,443,40,"drawerStyles"],[419,54,443,52],[419,56,443,54,"drawerContainerStyle"],[419,76,443,74],[420,8,444,6],[420,9,444,7],[420,11,444,9],[420,24,444,22,"_ReactNativeCSSInterop"],[420,46,444,22],[420,47,444,22,"createInteropElement"],[420,67,444,22],[420,68,444,42,"View"],[420,81,444,46],[420,83,444,48],[421,10,445,8,"style"],[421,15,445,13],[421,17,445,15,"dynamicDrawerStyles"],[422,8,446,6],[422,9,446,7],[422,11,446,9],[422,15,446,13],[422,16,446,14,"props"],[422,21,446,19],[422,22,446,20,"renderNavigationView"],[422,42,446,40],[422,43,446,41],[422,47,446,45],[422,48,446,46,"openValue"],[422,57,446,55],[422,58,446,56],[422,59,446,57],[422,60,446,58],[422,61,446,59],[423,6,447,4],[423,7,447,5],[423,8,447,6],[424,6,449,4,"_defineProperty"],[424,21,449,19],[424,22,449,20],[424,26,449,24],[424,28,449,26],[424,46,449,44],[424,48,449,46,"ref"],[424,51,449,49],[424,55,449,53],[425,8,450,6],[425,12,450,10,"_this$props$onGesture"],[425,33,450,31],[425,35,450,33,"_this$props5"],[425,47,450,45],[427,8,452,6],[428,8,453,6],[429,8,454,6],[429,12,454,10],[429,13,454,11,"panGestureHandler"],[429,30,454,28],[429,31,454,29,"current"],[429,38,454,36],[429,41,454,39,"ref"],[429,44,454,42],[430,8,455,6],[430,9,455,7,"_this$props$onGesture"],[430,30,455,28],[430,33,455,31],[430,34,455,32,"_this$props5"],[430,46,455,44],[430,49,455,47],[430,53,455,51],[430,54,455,52,"props"],[430,59,455,57],[430,61,455,59,"onGestureRef"],[430,73,455,71],[430,79,455,77],[430,83,455,81],[430,87,455,85,"_this$props$onGesture"],[430,108,455,106],[430,113,455,111],[430,118,455,116],[430,119,455,117],[430,122,455,120],[430,127,455,125],[430,128,455,126],[430,131,455,129,"_this$props$onGesture"],[430,152,455,150],[430,153,455,151,"call"],[430,157,455,155],[430,158,455,156,"_this$props5"],[430,170,455,168],[430,172,455,170,"ref"],[430,175,455,173],[430,176,455,174],[431,6,456,4],[431,7,456,5],[431,8,456,6],[432,6,458,4],[432,12,458,10,"_dragX"],[432,18,458,16],[432,21,458,19],[432,25,458,23,"Animated"],[432,42,458,31],[432,43,458,32,"Value"],[432,48,458,37],[432,49,458,38],[432,50,458,39],[432,51,458,40],[433,6,460,4],[433,12,460,10,"_touchX"],[433,19,460,17],[433,22,460,20],[433,26,460,24,"Animated"],[433,43,460,32],[433,44,460,33,"Value"],[433,49,460,38],[433,50,460,39],[433,51,460,40],[433,52,460,41],[434,6,462,4],[434,12,462,10,"_drawerTranslation"],[434,30,462,28],[434,33,462,31],[434,37,462,35,"Animated"],[434,54,462,43],[434,55,462,44,"Value"],[434,60,462,49],[434,61,462,50],[434,62,462,51],[434,63,462,52],[435,6,464,4],[435,10,464,8],[435,11,464,9,"state"],[435,16,464,14],[435,19,464,17],[436,8,465,6,"dragX"],[436,13,465,11],[436,15,465,13,"_dragX"],[436,21,465,19],[437,8,466,6,"touchX"],[437,14,466,12],[437,16,466,14,"_touchX"],[437,23,466,21],[438,8,467,6,"drawerTranslation"],[438,25,467,23],[438,27,467,25,"_drawerTranslation"],[438,45,467,43],[439,8,468,6,"containerWidth"],[439,22,468,20],[439,24,468,22],[439,25,468,23],[440,8,469,6,"drawerState"],[440,19,469,17],[440,21,469,19,"IDLE"],[440,25,469,23],[441,8,470,6,"drawerOpened"],[441,20,470,18],[441,22,470,20],[442,6,471,4],[442,7,471,5],[443,6,472,4],[443,10,472,8],[443,11,472,9,"updateAnimatedEvent"],[443,30,472,28],[443,31,472,29,"_props"],[443,37,472,35],[443,39,472,37],[443,43,472,41],[443,44,472,42,"state"],[443,49,472,47],[443,50,472,48],[444,4,473,2],[445,4,475,2,"shouldComponentUpdate"],[445,25,475,23,"shouldComponentUpdate"],[445,26,475,24,"props"],[445,31,475,29],[445,33,475,31,"state"],[445,38,475,36],[445,40,475,38],[446,6,476,4],[446,10,476,8],[446,14,476,12],[446,15,476,13,"props"],[446,20,476,18],[446,21,476,19,"drawerPosition"],[446,35,476,33],[446,40,476,38,"props"],[446,45,476,43],[446,46,476,44,"drawerPosition"],[446,60,476,58],[446,64,476,62],[446,68,476,66],[446,69,476,67,"props"],[446,74,476,72],[446,75,476,73,"drawerWidth"],[446,86,476,84],[446,91,476,89,"props"],[446,96,476,94],[446,97,476,95,"drawerWidth"],[446,108,476,106],[446,112,476,110],[446,116,476,114],[446,117,476,115,"props"],[446,122,476,120],[446,123,476,121,"drawerType"],[446,133,476,131],[446,138,476,136,"props"],[446,143,476,141],[446,144,476,142,"drawerType"],[446,154,476,152],[446,158,476,156],[446,162,476,160],[446,163,476,161,"state"],[446,168,476,166],[446,169,476,167,"containerWidth"],[446,183,476,181],[446,188,476,186,"state"],[446,193,476,191],[446,194,476,192,"containerWidth"],[446,208,476,206],[446,210,476,208],[447,8,477,6],[447,12,477,10],[447,13,477,11,"updateAnimatedEvent"],[447,32,477,30],[447,33,477,31,"props"],[447,38,477,36],[447,40,477,38,"state"],[447,45,477,43],[447,46,477,44],[448,6,478,4],[449,6,480,4],[449,13,480,11],[449,17,480,15],[450,4,481,2],[451,4,483,2,"render"],[451,10,483,8,"render"],[451,11,483,8],[451,13,483,11],[452,6,484,4],[452,12,484,10],[453,8,485,6,"drawerPosition"],[453,22,485,20],[454,8,486,6,"drawerLockMode"],[454,22,486,20],[455,8,487,6,"edgeWidth"],[455,17,487,15],[456,8,488,6,"minSwipeDistance"],[457,6,489,4],[457,7,489,5],[457,10,489,8],[457,14,489,12],[457,15,489,13,"props"],[457,20,489,18],[458,6,490,4],[458,12,490,10,"fromLeft"],[458,20,490,18],[458,23,490,21,"drawerPosition"],[458,37,490,35],[458,42,490,40],[458,48,490,46],[458,49,490,47],[458,50,490,48],[459,6,491,4],[460,6,492,4],[462,6,494,4],[462,12,494,10,"gestureOrientation"],[462,30,494,28],[462,33,494,31],[462,34,494,32,"fromLeft"],[462,42,494,40],[462,45,494,43],[462,46,494,44],[462,49,494,47],[462,50,494,48],[462,51,494,49],[462,56,494,54],[462,60,494,58],[462,61,494,59,"drawerShown"],[462,72,494,70],[462,75,494,73],[462,76,494,74],[462,77,494,75],[462,80,494,78],[462,81,494,79],[462,82,494,80],[462,83,494,81],[462,84,494,82],[463,6,495,4],[464,6,496,4],[466,6,498,4],[466,12,498,10,"hitSlop"],[466,19,498,17],[466,22,498,20,"fromLeft"],[466,30,498,28],[466,33,498,31],[467,8,499,6,"left"],[467,12,499,10],[467,14,499,12],[467,15,499,13],[468,8,500,6,"width"],[468,13,500,11],[468,15,500,13],[468,19,500,17],[468,20,500,18,"drawerShown"],[468,31,500,29],[468,34,500,32,"undefined"],[468,43,500,41],[468,46,500,44,"edgeWidth"],[469,6,501,4],[469,7,501,5],[469,10,501,8],[470,8,502,6,"right"],[470,13,502,11],[470,15,502,13],[470,16,502,14],[471,8,503,6,"width"],[471,13,503,11],[471,15,503,13],[471,19,503,17],[471,20,503,18,"drawerShown"],[471,31,503,29],[471,34,503,32,"undefined"],[471,43,503,41],[471,46,503,44,"edgeWidth"],[472,6,504,4],[472,7,504,5],[473,6,505,4],[473,13,505,11],[473,26,505,24,"_ReactNativeCSSInterop"],[473,48,505,24],[473,49,505,24,"createInteropElement"],[473,69,505,24],[473,70,505,44,"PanGestureHandler"],[473,106,505,61],[473,107,505,62],[474,6,505,62],[474,8,506,6],[475,8,507,6,"userSelect"],[475,18,507,16],[475,20,507,18],[475,24,507,22],[475,25,507,23,"props"],[475,30,507,28],[475,31,507,29,"userSelect"],[475,41,507,39],[476,8,508,6,"activeCursor"],[476,20,508,18],[476,22,508,20],[476,26,508,24],[476,27,508,25,"props"],[476,32,508,30],[476,33,508,31,"activeCursor"],[476,45,508,43],[477,8,509,6,"mouseButton"],[477,19,509,17],[477,21,509,19],[477,25,509,23],[477,26,509,24,"props"],[477,31,509,29],[477,32,509,30,"mouseButton"],[477,43,509,41],[478,8,510,6,"enableContextMenu"],[478,25,510,23],[478,27,510,25],[478,31,510,29],[478,32,510,30,"props"],[478,37,510,35],[478,38,510,36,"enableContextMenu"],[478,55,510,53],[479,8,511,6,"ref"],[479,11,511,9],[479,13,511,11],[479,17,511,15],[479,18,511,16,"setPanGestureRef"],[479,34,511,32],[480,8,512,6,"hitSlop"],[480,15,512,13],[480,17,512,15,"hitSlop"],[480,24,512,22],[481,8,513,6,"activeOffsetX"],[481,21,513,19],[481,23,513,21,"gestureOrientation"],[481,41,513,39],[481,44,513,42,"minSwipeDistance"],[481,60,513,58],[482,8,514,6,"failOffsetY"],[482,19,514,17],[482,21,514,19],[482,22,514,20],[482,23,514,21],[482,25,514,23],[482,27,514,25],[482,29,514,27],[482,30,514,28],[483,8,515,6,"onGestureEvent"],[483,22,515,20],[483,24,515,22],[483,28,515,26],[483,29,515,27,"onGestureEvent"],[483,43,515,41],[484,8,516,6,"onHandlerStateChange"],[484,28,516,26],[484,30,516,28],[484,34,516,32],[484,35,516,33,"openingHandlerStateChange"],[484,60,516,58],[485,8,517,6,"enableTrackpadTwoFingerGesture"],[485,38,517,36],[485,40,517,38],[485,44,517,42],[485,45,517,43,"props"],[485,50,517,48],[485,51,517,49,"enableTrackpadTwoFingerGesture"],[485,81,517,79],[486,8,518,6,"enabled"],[486,15,518,13],[486,17,518,15,"drawerLockMode"],[486,31,518,29],[486,36,518,34],[486,51,518,49],[486,55,518,53,"drawerLockMode"],[486,69,518,67],[486,74,518,72],[487,6,519,4],[487,7,519,5],[487,9,519,7],[487,13,519,11],[487,14,519,12,"renderDrawer"],[487,26,519,24],[487,27,519,25],[487,28,519,26],[487,29,519,27],[488,4,520,2],[489,2,522,0],[490,2,522,1,"exports"],[490,9,522,1],[490,10,522,1,"default"],[490,17,522,1],[490,20,522,1,"DrawerLayout"],[490,32,522,1],[491,2,524,0,"_defineProperty"],[491,17,524,15],[491,18,524,16,"DrawerLayout"],[491,30,524,28],[491,32,524,30],[491,46,524,44],[491,48,524,46],[492,4,525,2,"drawerWidth"],[492,15,525,13],[492,17,525,15],[492,20,525,18],[493,4,526,2,"drawerPosition"],[493,18,526,16],[493,20,526,18],[493,26,526,24],[494,4,527,2,"useNativeAnimations"],[494,23,527,21],[494,25,527,23],[494,29,527,27],[495,4,528,2,"drawerType"],[495,14,528,12],[495,16,528,14],[495,23,528,21],[496,4,529,2,"edgeWidth"],[496,13,529,11],[496,15,529,13],[496,17,529,15],[497,4,530,2,"minSwipeDistance"],[497,20,530,18],[497,22,530,20],[497,23,530,21],[498,4,531,2,"overlayColor"],[498,16,531,14],[498,18,531,16],[498,38,531,36],[499,4,532,2,"drawerLockMode"],[499,18,532,16],[499,20,532,18],[499,30,532,28],[500,4,533,2,"enableTrackpadTwoFingerGesture"],[500,34,533,32],[500,36,533,34],[501,2,534,0],[501,3,534,1],[501,4,534,2],[502,2,536,0,"_defineProperty"],[502,17,536,15],[502,18,536,16,"DrawerLayout"],[502,30,536,28],[502,32,536,30],[502,43,536,41],[502,45,536,43],[503,4,537,2,"Left"],[503,8,537,6],[503,10,537,8],[503,16,537,14],[504,4,538,2,"Right"],[504,9,538,7],[504,11,538,9],[505,2,539,0],[505,3,539,1],[505,4,539,2],[506,2,541,0],[506,8,541,6,"styles"],[506,14,541,12],[506,17,541,15,"StyleSheet"],[506,36,541,25],[506,37,541,26,"create"],[506,43,541,32],[506,44,541,33],[507,4,542,2,"drawerContainer"],[507,19,542,17],[507,21,542,19],[508,6,542,21],[508,9,542,24,"StyleSheet"],[508,28,542,34],[508,29,542,35,"absoluteFillObject"],[508,47,542,53],[509,6,543,4,"zIndex"],[509,12,543,10],[509,14,543,12],[509,18,543,16],[510,6,544,4,"flexDirection"],[510,19,544,17],[510,21,544,19],[511,4,545,2],[511,5,545,3],[512,4,546,2,"containerInFront"],[512,20,546,18],[512,22,546,20],[513,6,546,22],[513,9,546,25,"StyleSheet"],[513,28,546,35],[513,29,546,36,"absoluteFillObject"],[513,47,546,54],[514,6,547,4,"zIndex"],[514,12,547,10],[514,14,547,12],[515,4,548,2],[515,5,548,3],[516,4,549,2,"containerOnBack"],[516,19,549,17],[516,21,549,19],[517,6,549,21],[517,9,549,24,"StyleSheet"],[517,28,549,34],[517,29,549,35,"absoluteFillObject"],[518,4,550,2],[518,5,550,3],[519,4,551,2,"main"],[519,8,551,6],[519,10,551,8],[520,6,552,4,"flex"],[520,10,552,8],[520,12,552,10],[520,13,552,11],[521,6,553,4,"zIndex"],[521,12,553,10],[521,14,553,12],[521,15,553,13],[522,6,554,4,"overflow"],[522,14,554,12],[522,16,554,14],[523,4,555,2],[523,5,555,3],[524,4,556,2,"overlay"],[524,11,556,9],[524,13,556,11],[525,6,556,13],[525,9,556,16,"StyleSheet"],[525,28,556,26],[525,29,556,27,"absoluteFillObject"],[525,47,556,45],[526,6,557,4,"zIndex"],[526,12,557,10],[526,14,557,12],[527,4,558,2],[528,2,559,0],[528,3,559,1],[528,4,559,2],[529,0,559,3],[529,3]],"functionMap":{"names":["_defineProperty","<global>","DrawerLayout","constructor","_defineProperty$argument_2","gestureOptions.listener","Animated.spring.start$argument_0","shouldComponentUpdate","render"],"mappings":"AAA,iNC;eC2B;ECC;iDCe;kCC8E;SDM;KDS;mDCE;KDM;8CCE;KDI;uDCE;KDqB;qDCE;KDM;2CCE;KDyC;2CCE;KDmC;2CCE;eEuC;OF2B;KDC;wCCE;KDM;yCCE;KDM;2CCE;KDsB;0CCE;KD0E;8CCE;KDO;GDiB;EKE;GLM;EME;GNqC;CDE"}},"type":"js/module"}]}