{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.append = append;\n  exports.appendTransform = appendTransform;\n  exports.identity = void 0;\n  exports.reset = reset;\n  exports.toArray = toArray;\n  /**\n   * based on\n   * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n   */\n  const DEG_TO_RAD = Math.PI / 180;\n  const identity = exports.identity = [1, 0, 0, 1, 0, 0];\n  let a = 1;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  let tx = 0;\n  let ty = 0;\n  let hasInitialState = true;\n\n  /**\n   * Represents an affine transformation matrix, and provides tools for concatenating transforms.\n   *\n   * This matrix can be visualized as:\n   *\n   * \t[ a  c  tx\n   * \t  b  d  ty\n   * \t  0  0  1  ]\n   *\n   * Note the locations of b and c.\n   **/\n\n  /**\n   * Reset current matrix to an identity matrix.\n   * @method reset\n   **/\n  function reset() {\n    if (hasInitialState) {\n      return;\n    }\n    a = d = 1;\n    b = c = tx = ty = 0;\n    hasInitialState = true;\n  }\n\n  /**\n   * Returns an array with current matrix values.\n   * @method toArray\n   * @return {Array} an array with current matrix values.\n   **/\n  function toArray() {\n    if (hasInitialState) {\n      return identity;\n    }\n    return [a, b, c, d, tx, ty];\n  }\n\n  /**\n   * Appends the specified matrix properties to this matrix. All parameters are required.\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n   * @method append\n   * @param {Number} a2\n   * @param {Number} b2\n   * @param {Number} c2\n   * @param {Number} d2\n   * @param {Number} tx2\n   * @param {Number} ty2\n   **/\n  function append(a2, b2, c2, d2, tx2, ty2) {\n    const change = a2 !== 1 || b2 !== 0 || c2 !== 0 || d2 !== 1;\n    const translate = tx2 !== 0 || ty2 !== 0;\n    if (!change && !translate) {\n      return;\n    }\n    if (hasInitialState) {\n      hasInitialState = false;\n      a = a2;\n      b = b2;\n      c = c2;\n      d = d2;\n      tx = tx2;\n      ty = ty2;\n      return;\n    }\n    const a1 = a;\n    const b1 = b;\n    const c1 = c;\n    const d1 = d;\n    if (change) {\n      a = a1 * a2 + c1 * b2;\n      b = b1 * a2 + d1 * b2;\n      c = a1 * c2 + c1 * d2;\n      d = b1 * c2 + d1 * d2;\n    }\n    if (translate) {\n      tx = a1 * tx2 + c1 * ty2 + tx;\n      ty = b1 * tx2 + d1 * ty2 + ty;\n    }\n  }\n\n  /**\n   * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n   * For example, you can use this to generate a matrix representing the transformations of a display object:\n   *\n   * \treset();\n   * \tappendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n   * \tvar matrix = toArray()\n   *\n   * @method appendTransform\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} scaleX\n   * @param {Number} scaleY\n   * @param {Number} rotation\n   * @param {Number} skewX\n   * @param {Number} skewY\n   * @param {Number} regX Optional.\n   * @param {Number} regY Optional.\n   **/\n  function appendTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (x === 0 && y === 0 && scaleX === 1 && scaleY === 1 && rotation === 0 && skewX === 0 && skewY === 0 && regX === 0 && regY === 0) {\n      return;\n    }\n    let cos, sin;\n    if (rotation % 360) {\n      const r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    const a2 = cos * scaleX;\n    const b2 = sin * scaleX;\n    const c2 = -sin * scaleY;\n    const d2 = cos * scaleY;\n    if (skewX || skewY) {\n      const b1 = Math.tan(skewY * DEG_TO_RAD);\n      const c1 = Math.tan(skewX * DEG_TO_RAD);\n      append(a2 + c1 * b2, b1 * a2 + b2, c2 + c1 * d2, b1 * c2 + d2, x, y);\n    } else {\n      append(a2, b2, c2, d2, x, y);\n    }\n    if (regX || regY) {\n      // append the registration offset:\n      tx -= regX * a + regY * c;\n      ty -= regX * b + regY * d;\n      hasInitialState = false;\n    }\n  }\n});","lineCount":154,"map":[[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,2,5,0],[14,8,5,6,"DEG_TO_RAD"],[14,18,5,16],[14,21,5,19,"Math"],[14,25,5,23],[14,26,5,24,"PI"],[14,28,5,26],[14,31,5,29],[14,34,5,32],[15,2,6,7],[15,8,6,13,"identity"],[15,16,6,21],[15,19,6,21,"exports"],[15,26,6,21],[15,27,6,21,"identity"],[15,35,6,21],[15,38,6,24],[15,39,6,25],[15,40,6,26],[15,42,6,28],[15,43,6,29],[15,45,6,31],[15,46,6,32],[15,48,6,34],[15,49,6,35],[15,51,6,37],[15,52,6,38],[15,54,6,40],[15,55,6,41],[15,56,6,42],[16,2,7,0],[16,6,7,4,"a"],[16,7,7,5],[16,10,7,8],[16,11,7,9],[17,2,8,0],[17,6,8,4,"b"],[17,7,8,5],[17,10,8,8],[17,11,8,9],[18,2,9,0],[18,6,9,4,"c"],[18,7,9,5],[18,10,9,8],[18,11,9,9],[19,2,10,0],[19,6,10,4,"d"],[19,7,10,5],[19,10,10,8],[19,11,10,9],[20,2,11,0],[20,6,11,4,"tx"],[20,8,11,6],[20,11,11,9],[20,12,11,10],[21,2,12,0],[21,6,12,4,"ty"],[21,8,12,6],[21,11,12,9],[21,12,12,10],[22,2,13,0],[22,6,13,4,"hasInitialState"],[22,21,13,19],[22,24,13,22],[22,28,13,26],[24,2,15,0],[25,0,16,0],[26,0,17,0],[27,0,18,0],[28,0,19,0],[29,0,20,0],[30,0,21,0],[31,0,22,0],[32,0,23,0],[33,0,24,0],[34,0,25,0],[36,2,27,0],[37,0,28,0],[38,0,29,0],[39,0,30,0],[40,2,31,7],[40,11,31,16,"reset"],[40,16,31,21,"reset"],[40,17,31,21],[40,19,31,24],[41,4,32,2],[41,8,32,6,"hasInitialState"],[41,23,32,21],[41,25,32,23],[42,6,33,4],[43,4,34,2],[44,4,35,2,"a"],[44,5,35,3],[44,8,35,6,"d"],[44,9,35,7],[44,12,35,10],[44,13,35,11],[45,4,36,2,"b"],[45,5,36,3],[45,8,36,6,"c"],[45,9,36,7],[45,12,36,10,"tx"],[45,14,36,12],[45,17,36,15,"ty"],[45,19,36,17],[45,22,36,20],[45,23,36,21],[46,4,37,2,"hasInitialState"],[46,19,37,17],[46,22,37,20],[46,26,37,24],[47,2,38,0],[49,2,40,0],[50,0,41,0],[51,0,42,0],[52,0,43,0],[53,0,44,0],[54,2,45,7],[54,11,45,16,"toArray"],[54,18,45,23,"toArray"],[54,19,45,23],[54,21,45,26],[55,4,46,2],[55,8,46,6,"hasInitialState"],[55,23,46,21],[55,25,46,23],[56,6,47,4],[56,13,47,11,"identity"],[56,21,47,19],[57,4,48,2],[58,4,49,2],[58,11,49,9],[58,12,49,10,"a"],[58,13,49,11],[58,15,49,13,"b"],[58,16,49,14],[58,18,49,16,"c"],[58,19,49,17],[58,21,49,19,"d"],[58,22,49,20],[58,24,49,22,"tx"],[58,26,49,24],[58,28,49,26,"ty"],[58,30,49,28],[58,31,49,29],[59,2,50,0],[61,2,52,0],[62,0,53,0],[63,0,54,0],[64,0,55,0],[65,0,56,0],[66,0,57,0],[67,0,58,0],[68,0,59,0],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,2,63,7],[72,11,63,16,"append"],[72,17,63,22,"append"],[72,18,63,23,"a2"],[72,20,63,25],[72,22,63,27,"b2"],[72,24,63,29],[72,26,63,31,"c2"],[72,28,63,33],[72,30,63,35,"d2"],[72,32,63,37],[72,34,63,39,"tx2"],[72,37,63,42],[72,39,63,44,"ty2"],[72,42,63,47],[72,44,63,49],[73,4,64,2],[73,10,64,8,"change"],[73,16,64,14],[73,19,64,17,"a2"],[73,21,64,19],[73,26,64,24],[73,27,64,25],[73,31,64,29,"b2"],[73,33,64,31],[73,38,64,36],[73,39,64,37],[73,43,64,41,"c2"],[73,45,64,43],[73,50,64,48],[73,51,64,49],[73,55,64,53,"d2"],[73,57,64,55],[73,62,64,60],[73,63,64,61],[74,4,65,2],[74,10,65,8,"translate"],[74,19,65,17],[74,22,65,20,"tx2"],[74,25,65,23],[74,30,65,28],[74,31,65,29],[74,35,65,33,"ty2"],[74,38,65,36],[74,43,65,41],[74,44,65,42],[75,4,66,2],[75,8,66,6],[75,9,66,7,"change"],[75,15,66,13],[75,19,66,17],[75,20,66,18,"translate"],[75,29,66,27],[75,31,66,29],[76,6,67,4],[77,4,68,2],[78,4,69,2],[78,8,69,6,"hasInitialState"],[78,23,69,21],[78,25,69,23],[79,6,70,4,"hasInitialState"],[79,21,70,19],[79,24,70,22],[79,29,70,27],[80,6,71,4,"a"],[80,7,71,5],[80,10,71,8,"a2"],[80,12,71,10],[81,6,72,4,"b"],[81,7,72,5],[81,10,72,8,"b2"],[81,12,72,10],[82,6,73,4,"c"],[82,7,73,5],[82,10,73,8,"c2"],[82,12,73,10],[83,6,74,4,"d"],[83,7,74,5],[83,10,74,8,"d2"],[83,12,74,10],[84,6,75,4,"tx"],[84,8,75,6],[84,11,75,9,"tx2"],[84,14,75,12],[85,6,76,4,"ty"],[85,8,76,6],[85,11,76,9,"ty2"],[85,14,76,12],[86,6,77,4],[87,4,78,2],[88,4,79,2],[88,10,79,8,"a1"],[88,12,79,10],[88,15,79,13,"a"],[88,16,79,14],[89,4,80,2],[89,10,80,8,"b1"],[89,12,80,10],[89,15,80,13,"b"],[89,16,80,14],[90,4,81,2],[90,10,81,8,"c1"],[90,12,81,10],[90,15,81,13,"c"],[90,16,81,14],[91,4,82,2],[91,10,82,8,"d1"],[91,12,82,10],[91,15,82,13,"d"],[91,16,82,14],[92,4,83,2],[92,8,83,6,"change"],[92,14,83,12],[92,16,83,14],[93,6,84,4,"a"],[93,7,84,5],[93,10,84,8,"a1"],[93,12,84,10],[93,15,84,13,"a2"],[93,17,84,15],[93,20,84,18,"c1"],[93,22,84,20],[93,25,84,23,"b2"],[93,27,84,25],[94,6,85,4,"b"],[94,7,85,5],[94,10,85,8,"b1"],[94,12,85,10],[94,15,85,13,"a2"],[94,17,85,15],[94,20,85,18,"d1"],[94,22,85,20],[94,25,85,23,"b2"],[94,27,85,25],[95,6,86,4,"c"],[95,7,86,5],[95,10,86,8,"a1"],[95,12,86,10],[95,15,86,13,"c2"],[95,17,86,15],[95,20,86,18,"c1"],[95,22,86,20],[95,25,86,23,"d2"],[95,27,86,25],[96,6,87,4,"d"],[96,7,87,5],[96,10,87,8,"b1"],[96,12,87,10],[96,15,87,13,"c2"],[96,17,87,15],[96,20,87,18,"d1"],[96,22,87,20],[96,25,87,23,"d2"],[96,27,87,25],[97,4,88,2],[98,4,89,2],[98,8,89,6,"translate"],[98,17,89,15],[98,19,89,17],[99,6,90,4,"tx"],[99,8,90,6],[99,11,90,9,"a1"],[99,13,90,11],[99,16,90,14,"tx2"],[99,19,90,17],[99,22,90,20,"c1"],[99,24,90,22],[99,27,90,25,"ty2"],[99,30,90,28],[99,33,90,31,"tx"],[99,35,90,33],[100,6,91,4,"ty"],[100,8,91,6],[100,11,91,9,"b1"],[100,13,91,11],[100,16,91,14,"tx2"],[100,19,91,17],[100,22,91,20,"d1"],[100,24,91,22],[100,27,91,25,"ty2"],[100,30,91,28],[100,33,91,31,"ty"],[100,35,91,33],[101,4,92,2],[102,2,93,0],[104,2,95,0],[105,0,96,0],[106,0,97,0],[107,0,98,0],[108,0,99,0],[109,0,100,0],[110,0,101,0],[111,0,102,0],[112,0,103,0],[113,0,104,0],[114,0,105,0],[115,0,106,0],[116,0,107,0],[117,0,108,0],[118,0,109,0],[119,0,110,0],[120,0,111,0],[121,0,112,0],[122,0,113,0],[123,2,114,7],[123,11,114,16,"appendTransform"],[123,26,114,31,"appendTransform"],[123,27,114,32,"x"],[123,28,114,33],[123,30,114,35,"y"],[123,31,114,36],[123,33,114,38,"scaleX"],[123,39,114,44],[123,41,114,46,"scaleY"],[123,47,114,52],[123,49,114,54,"rotation"],[123,57,114,62],[123,59,114,64,"skewX"],[123,64,114,69],[123,66,114,71,"skewY"],[123,71,114,76],[123,73,114,78,"regX"],[123,77,114,82],[123,79,114,84,"regY"],[123,83,114,88],[123,85,114,90],[124,4,115,2],[124,8,115,6,"x"],[124,9,115,7],[124,14,115,12],[124,15,115,13],[124,19,115,17,"y"],[124,20,115,18],[124,25,115,23],[124,26,115,24],[124,30,115,28,"scaleX"],[124,36,115,34],[124,41,115,39],[124,42,115,40],[124,46,115,44,"scaleY"],[124,52,115,50],[124,57,115,55],[124,58,115,56],[124,62,115,60,"rotation"],[124,70,115,68],[124,75,115,73],[124,76,115,74],[124,80,115,78,"skewX"],[124,85,115,83],[124,90,115,88],[124,91,115,89],[124,95,115,93,"skewY"],[124,100,115,98],[124,105,115,103],[124,106,115,104],[124,110,115,108,"regX"],[124,114,115,112],[124,119,115,117],[124,120,115,118],[124,124,115,122,"regY"],[124,128,115,126],[124,133,115,131],[124,134,115,132],[124,136,115,134],[125,6,116,4],[126,4,117,2],[127,4,118,2],[127,8,118,6,"cos"],[127,11,118,9],[127,13,118,11,"sin"],[127,16,118,14],[128,4,119,2],[128,8,119,6,"rotation"],[128,16,119,14],[128,19,119,17],[128,22,119,20],[128,24,119,22],[129,6,120,4],[129,12,120,10,"r"],[129,13,120,11],[129,16,120,14,"rotation"],[129,24,120,22],[129,27,120,25,"DEG_TO_RAD"],[129,37,120,35],[130,6,121,4,"cos"],[130,9,121,7],[130,12,121,10,"Math"],[130,16,121,14],[130,17,121,15,"cos"],[130,20,121,18],[130,21,121,19,"r"],[130,22,121,20],[130,23,121,21],[131,6,122,4,"sin"],[131,9,122,7],[131,12,122,10,"Math"],[131,16,122,14],[131,17,122,15,"sin"],[131,20,122,18],[131,21,122,19,"r"],[131,22,122,20],[131,23,122,21],[132,4,123,2],[132,5,123,3],[132,11,123,9],[133,6,124,4,"cos"],[133,9,124,7],[133,12,124,10],[133,13,124,11],[134,6,125,4,"sin"],[134,9,125,7],[134,12,125,10],[134,13,125,11],[135,4,126,2],[136,4,127,2],[136,10,127,8,"a2"],[136,12,127,10],[136,15,127,13,"cos"],[136,18,127,16],[136,21,127,19,"scaleX"],[136,27,127,25],[137,4,128,2],[137,10,128,8,"b2"],[137,12,128,10],[137,15,128,13,"sin"],[137,18,128,16],[137,21,128,19,"scaleX"],[137,27,128,25],[138,4,129,2],[138,10,129,8,"c2"],[138,12,129,10],[138,15,129,13],[138,16,129,14,"sin"],[138,19,129,17],[138,22,129,20,"scaleY"],[138,28,129,26],[139,4,130,2],[139,10,130,8,"d2"],[139,12,130,10],[139,15,130,13,"cos"],[139,18,130,16],[139,21,130,19,"scaleY"],[139,27,130,25],[140,4,131,2],[140,8,131,6,"skewX"],[140,13,131,11],[140,17,131,15,"skewY"],[140,22,131,20],[140,24,131,22],[141,6,132,4],[141,12,132,10,"b1"],[141,14,132,12],[141,17,132,15,"Math"],[141,21,132,19],[141,22,132,20,"tan"],[141,25,132,23],[141,26,132,24,"skewY"],[141,31,132,29],[141,34,132,32,"DEG_TO_RAD"],[141,44,132,42],[141,45,132,43],[142,6,133,4],[142,12,133,10,"c1"],[142,14,133,12],[142,17,133,15,"Math"],[142,21,133,19],[142,22,133,20,"tan"],[142,25,133,23],[142,26,133,24,"skewX"],[142,31,133,29],[142,34,133,32,"DEG_TO_RAD"],[142,44,133,42],[142,45,133,43],[143,6,134,4,"append"],[143,12,134,10],[143,13,134,11,"a2"],[143,15,134,13],[143,18,134,16,"c1"],[143,20,134,18],[143,23,134,21,"b2"],[143,25,134,23],[143,27,134,25,"b1"],[143,29,134,27],[143,32,134,30,"a2"],[143,34,134,32],[143,37,134,35,"b2"],[143,39,134,37],[143,41,134,39,"c2"],[143,43,134,41],[143,46,134,44,"c1"],[143,48,134,46],[143,51,134,49,"d2"],[143,53,134,51],[143,55,134,53,"b1"],[143,57,134,55],[143,60,134,58,"c2"],[143,62,134,60],[143,65,134,63,"d2"],[143,67,134,65],[143,69,134,67,"x"],[143,70,134,68],[143,72,134,70,"y"],[143,73,134,71],[143,74,134,72],[144,4,135,2],[144,5,135,3],[144,11,135,9],[145,6,136,4,"append"],[145,12,136,10],[145,13,136,11,"a2"],[145,15,136,13],[145,17,136,15,"b2"],[145,19,136,17],[145,21,136,19,"c2"],[145,23,136,21],[145,25,136,23,"d2"],[145,27,136,25],[145,29,136,27,"x"],[145,30,136,28],[145,32,136,30,"y"],[145,33,136,31],[145,34,136,32],[146,4,137,2],[147,4,138,2],[147,8,138,6,"regX"],[147,12,138,10],[147,16,138,14,"regY"],[147,20,138,18],[147,22,138,20],[148,6,139,4],[149,6,140,4,"tx"],[149,8,140,6],[149,12,140,10,"regX"],[149,16,140,14],[149,19,140,17,"a"],[149,20,140,18],[149,23,140,21,"regY"],[149,27,140,25],[149,30,140,28,"c"],[149,31,140,29],[150,6,141,4,"ty"],[150,8,141,6],[150,12,141,10,"regX"],[150,16,141,14],[150,19,141,17,"b"],[150,20,141,18],[150,23,141,21,"regY"],[150,27,141,25],[150,30,141,28,"d"],[150,31,141,29],[151,6,142,4,"hasInitialState"],[151,21,142,19],[151,24,142,22],[151,29,142,27],[152,4,143,2],[153,2,144,0],[154,0,144,1],[154,3]],"functionMap":{"names":["<global>","reset","toArray","append","appendTransform"],"mappings":"AAA;OC8B;CDO;OEO;CFK;OGa;CH8B;OIqB;CJ8B"}},"type":"js/module"}]}