{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":256},"end":{"line":7,"column":40,"index":277}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"]}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":293},"end":{"line":8,"column":36,"index":315}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRoutes = getRoutes;\n  exports.getIgnoreList = getIgnoreList;\n  exports.extrapolateGroups = extrapolateGroups;\n  exports.generateDynamic = generateDynamic;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const url_1 = require(_dependencyMap[1], \"./utils/url\");\n  const validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    const directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    const rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    const importMode = options.importMode || \"sync\";\n    const ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api$/, /\\+api\\.[tj]sx?$/);\n    }\n    const rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    let hasRoutes = false;\n    let isValid = false;\n    const contextKeys = contextModule.keys();\n    const redirects = {};\n    const rewrites = {};\n    let validRedirectDestinations;\n    // If we are keeping redirects as valid routes, then we need to add them to the contextKeys\n    // This is useful for generating a sitemap with redirects, or static site generation that includes redirects\n    if (options.preserveRedirectAndRewrites) {\n      if (options.redirects) {\n        for (const redirect of options.redirects) {\n          // Remove the leading `./` or `/`\n          const source = redirect.source.replace(/^\\.?\\//, '');\n          const isExternalRedirect = (0, url_1.shouldLinkExternally)(redirect.destination);\n          const targetDestination = isExternalRedirect ? redirect.destination : (0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeFileSystemExtensions)(redirect.destination.replace(/^\\.?\\/?/, ''))));\n          const normalizedSource = (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(source));\n          if (ignoreList.some(regex => regex.test(normalizedSource))) {\n            continue;\n          }\n          // Loop over this once and cache the valid destinations\n          validRedirectDestinations ??= contextKeys.map(key => {\n            return [(0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(key))), key];\n          });\n          const destination = isExternalRedirect ? targetDestination : validRedirectDestinations.find(key => key[0] === targetDestination)?.[1];\n          if (!destination) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Redirect destination \"${redirect.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          const fakeContextKey = (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(source));\n          contextKeys.push(fakeContextKey);\n          redirects[fakeContextKey] = {\n            source,\n            destination,\n            permanent: Boolean(redirect.permanent),\n            external: isExternalRedirect,\n            methods: redirect.methods\n          };\n        }\n      }\n      if (options.rewrites) {\n        for (const rewrite of options.rewrites) {\n          // Remove the leading `./` or `/`\n          const source = rewrite.source.replace(/^\\.?\\//, '');\n          const targetDestination = (0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(rewrite.destination)));\n          const normalizedSource = (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(source));\n          if (ignoreList.some(regex => regex.test(normalizedSource))) {\n            continue;\n          }\n          // Loop over this once and cache the valid destinations\n          validRedirectDestinations ??= contextKeys.map(key => {\n            return [(0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(key))), key];\n          });\n          const destination = validRedirectDestinations.find(key => key[0] === targetDestination)?.[1];\n          if (!destination) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Redirect destination \"${rewrite.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          // Add a fake context key\n          const fakeContextKey = `./${source}.tsx`;\n          contextKeys.push(fakeContextKey);\n          rewrites[fakeContextKey] = {\n            source,\n            destination,\n            methods: rewrite.methods\n          };\n        }\n      }\n    }\n    for (const filePath of contextKeys) {\n      if (ignoreList.some(regex => regex.test(filePath))) {\n        continue;\n      }\n      isValid = true;\n      const meta = getFileMeta(filePath, options, redirects, rewrites);\n      // This is a file that should be ignored. e.g maybe it has an invalid platform?\n      if (meta.specificity < 0) {\n        continue;\n      }\n      let node = {\n        type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n        loadRoute() {\n          let routeModule;\n          if (options.ignoreRequireErrors) {\n            try {\n              routeModule = contextModule(filePath);\n            } catch {\n              routeModule = {};\n            }\n          } else {\n            routeModule = contextModule(filePath);\n          }\n          if (process.env.NODE_ENV === 'development' && importMode === 'sync') {\n            // In development mode, when async routes are disabled, add some extra error handling to improve the developer experience.\n            // This can be useful when you accidentally use an async function in a route file for the default export.\n            if (routeModule instanceof Promise) {\n              throw new Error(`Route \"${filePath}\" cannot be a promise when async routes is disabled.`);\n            }\n            const defaultExport = routeModule?.default;\n            if (defaultExport instanceof Promise) {\n              throw new Error(`The default export from route \"${filePath}\" is a promise. Ensure the React Component does not use async or promises.`);\n            }\n            // check if default is an async function without invoking it\n            if (defaultExport instanceof Function &&\n            // This only works on web because Hermes support async functions so we have to transform them out.\n            defaultExport.constructor.name === 'AsyncFunction') {\n              throw new Error(`The default export from route \"${filePath}\" is an async function. Ensure the React Component does not use async or promises.`);\n            }\n          }\n          return routeModule;\n        },\n        contextKey: filePath,\n        route: '',\n        // This is overwritten during hoisting based upon the _layout\n        dynamic: null,\n        children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n      };\n      if (meta.isRedirect) {\n        node.destinationContextKey = redirects[filePath].destination;\n        node.permanent = redirects[filePath].permanent;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'redirect',\n            route: (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(node.destinationContextKey))\n          }, node);\n        }\n        if (redirects[filePath].methods) {\n          node.methods = redirects[filePath].methods;\n        }\n        node.type = 'redirect';\n      }\n      if (meta.isRewrite) {\n        node.destinationContextKey = rewrites[filePath].destination;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'rewrite',\n            route: (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(node.destinationContextKey))\n          }, node);\n        }\n        if (redirects[filePath].methods) {\n          node.methods = redirects[filePath].methods;\n        }\n        node.type = 'rewrite';\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n        // filter the missing routes.\n        if (node.type !== 'api' && importMode === 'sync') {\n          const routeItem = node.loadRoute();\n          // Have a warning for nullish ex\n          const route = routeItem?.default;\n          if (route == null) {\n            // Do not throw an error since a user may just be creating a new route.\n            console.warn(`Route \"${filePath}\" is missing the required default export. Ensure a React component is exported as default.`);\n            continue;\n          }\n          if (['boolean', 'number', 'string'].includes(typeof route)) {\n            throw new Error(`The default export from route \"${filePath}\" is an unsupported type: \"${typeof route}\". Only React Components are supported as default exports from route files.`);\n          }\n        }\n      }\n      /**\n       * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n       * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n       */\n      for (const route of extrapolateGroups(meta.route)) {\n        // Traverse the directory tree to its leaf node, creating any missing directories along the way\n        const subdirectoryParts = route.split('/').slice(0, -1);\n        // Start at the root directory and traverse the path to the leaf directory\n        let directory = rootDirectory;\n        for (const part of subdirectoryParts) {\n          let subDirectory = directory.subdirectories.get(part);\n          // Create any missing subdirectories\n          if (!subDirectory) {\n            subDirectory = {\n              files: new Map(),\n              subdirectories: new Map()\n            };\n            directory.subdirectories.set(part, subDirectory);\n          }\n          directory = subDirectory;\n        }\n        // Clone the node for this route\n        node = {\n          ...node,\n          route\n        };\n        if (meta.isLayout) {\n          directory.layout ??= [];\n          const existing = directory.layout[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            node = getLayoutNode(node, options);\n            directory.layout[meta.specificity] = node;\n          }\n        } else if (meta.isApi) {\n          const fileKey = `${route}+api`;\n          let nodes = directory.files.get(fileKey);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(fileKey, nodes);\n          }\n          // API Routes have no specificity, they are always the first node\n          const existing = nodes[0];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            nodes[0] = node;\n          }\n        } else {\n          let nodes = directory.files.get(route);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(route, nodes);\n          }\n          /**\n           * If there is an existing node with the same specificity, then we have a conflict.\n           * NOTE(Platform Routes):\n           *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n           *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n           */\n          const existing = nodes[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            hasRoutes ||= true;\n            nodes[meta.specificity] = node;\n          }\n        }\n      }\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes && options.sitemap !== false) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      if (options.notFound !== false) {\n        appendNotFoundRoute(rootDirectory, options);\n      }\n    }\n    return rootDirectory;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout, /* Route names are relative to their layout */\n  pathToRemove = '') {\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      const previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      const newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (const routes of directory.files.values()) {\n      const routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (const child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(originalKey, options, redirects, rewrites) {\n    // Remove the leading `./`\n    const key = (0, matchers_1.removeSupportedExtensions)((0, matchers_1.removeFileSystemDots)(originalKey));\n    let route = key;\n    const parts = (0, matchers_1.removeFileSystemDots)(originalKey).split('/');\n    const filename = parts[parts.length - 1];\n    const [filenameWithoutExtensions, platformExtension] = (0, matchers_1.removeSupportedExtensions)(filename).split('.');\n    const isLayout = filenameWithoutExtensions === '_layout';\n    const isApi = originalKey.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ${originalKey}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      const renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ${originalKey}. Route nodes cannot start with the '+' character. \"Rename it to ${renamedRoute}\"`);\n    }\n    let specificity = 0;\n    const hasPlatformExtension = validPlatforms.has(platformExtension);\n    const usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`API routes cannot have platform extensions. Remove '.${platformExtension}' from '${originalKey}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi,\n      isRedirect: key in redirects,\n      isRewrite: key in rewrites\n    };\n  }\n  function getIgnoreList(options) {\n    const ignore = [/^\\.\\/\\+html\\.[tj]sx?$/, ...(options?.ignore ?? [])];\n    if (options?.preserveApiRoutes !== true) {\n      ignore.push(/\\+api\\.[tj]sx?$/);\n    }\n    return ignore;\n  }\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key, keys = new Set()) {\n    const match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    const groups = match.split(',');\n    const groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (const group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  function generateDynamic(path) {\n    const dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      return (0, matchers_1.matchDynamicName)(part) ?? null;\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different anchor based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    const groupName = (0, matchers_1.matchLastGroupName)(node.route);\n    const childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    let anchor = childMatchingGroup?.route;\n    const loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      try {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (!error.message.match(/You cannot dot into a client module/)) {\n            throw error;\n          }\n        }\n      }\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n        anchor = groupSpecificInitialRouteName ?? anchor;\n      }\n    }\n    return {\n      ...node,\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      // Each layout should have its own children\n      initialRouteName: anchor\n    };\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options, entryPoints = []) {\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'redirect') {\n      node.entryPoints = [...new Set([...entryPoints, node.destinationContextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different anchor based upon the first group.\n       */\n      const groupName = (0, matchers_1.matchGroupName)(node.route);\n      const childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      let anchor = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        const loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          try {\n            // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n            anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n          } catch (error) {\n            if (error instanceof Error) {\n              if (!error.message.match(/You cannot dot into a client module/)) {\n                throw error;\n              }\n            }\n          }\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n            anchor = groupSpecificInitialRouteName ?? anchor;\n          }\n        }\n      }\n      if (anchor) {\n        const anchorRoute = node.children.find(child => child.route === anchor);\n        if (!anchorRoute) {\n          const validAnchorRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}' for group '(${groupName})'. Valid options are: ${validAnchorRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}'. Valid options are: ${validAnchorRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = anchor;\n        entryPoints.push(anchorRoute.contextKey);\n      }\n      for (const child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    const route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":603,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getRoutes"],[7,19,3,17],[7,22,3,20,"getRoutes"],[7,31,3,29],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getIgnoreList"],[8,23,4,21],[8,26,4,24,"getIgnoreList"],[8,39,4,37],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"extrapolateGroups"],[9,27,5,25],[9,30,5,28,"extrapolateGroups"],[9,47,5,45],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"generateDynamic"],[10,25,6,23],[10,28,6,26,"generateDynamic"],[10,43,6,41],[11,2,7,0],[11,8,7,6,"matchers_1"],[11,18,7,16],[11,21,7,19,"require"],[11,28,7,26],[11,29,7,26,"_dependencyMap"],[11,43,7,26],[11,60,7,39],[11,61,7,40],[12,2,8,0],[12,8,8,6,"url_1"],[12,13,8,11],[12,16,8,14,"require"],[12,23,8,21],[12,24,8,21,"_dependencyMap"],[12,38,8,21],[12,56,8,35],[12,57,8,36],[13,2,9,0],[13,8,9,6,"validPlatforms"],[13,22,9,20],[13,25,9,23],[13,29,9,27,"Set"],[13,32,9,30],[13,33,9,31],[13,34,9,32],[13,43,9,41],[13,45,9,43],[13,50,9,48],[13,52,9,50],[13,60,9,58],[13,62,9,60],[13,67,9,65],[13,68,9,66],[13,69,9,67],[14,2,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,2,22,0],[26,11,22,9,"getRoutes"],[26,20,22,18,"getRoutes"],[26,21,22,19,"contextModule"],[26,34,22,32],[26,36,22,34,"options"],[26,43,22,41],[26,45,22,43],[27,4,23,4],[27,10,23,10,"directoryTree"],[27,23,23,23],[27,26,23,26,"getDirectoryTree"],[27,42,23,42],[27,43,23,43,"contextModule"],[27,56,23,56],[27,58,23,58,"options"],[27,65,23,65],[27,66,23,66],[28,4,24,4],[29,4,25,4],[29,8,25,8],[29,9,25,9,"directoryTree"],[29,22,25,22],[29,24,25,24],[30,6,26,8],[30,13,26,15],[30,17,26,19],[31,4,27,4],[32,4,28,4],[32,10,28,10,"rootNode"],[32,18,28,18],[32,21,28,21,"flattenDirectoryTreeToRoutes"],[32,49,28,49],[32,50,28,50,"directoryTree"],[32,63,28,63],[32,65,28,65,"options"],[32,72,28,72],[32,73,28,73],[33,4,29,4],[33,8,29,8],[33,9,29,9,"options"],[33,16,29,16],[33,17,29,17,"ignoreEntryPoints"],[33,34,29,34],[33,36,29,36],[34,6,30,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[34,46,30,48],[34,47,30,49,"rootNode"],[34,55,30,57],[34,57,30,59,"options"],[34,64,30,66],[34,65,30,67],[35,4,31,4],[36,4,32,4],[36,11,32,11,"rootNode"],[36,19,32,19],[37,2,33,0],[38,2,34,0],[39,0,35,0],[40,0,36,0],[41,2,37,0],[41,11,37,9,"getDirectoryTree"],[41,27,37,25,"getDirectoryTree"],[41,28,37,26,"contextModule"],[41,41,37,39],[41,43,37,41,"options"],[41,50,37,48],[41,52,37,50],[42,4,38,4],[42,10,38,10,"importMode"],[42,20,38,20],[42,23,38,23,"options"],[42,30,38,30],[42,31,38,31,"importMode"],[42,41,38,41],[42,51,38,80],[43,4,39,4],[43,10,39,10,"ignoreList"],[43,20,39,20],[43,23,39,23],[43,24,39,24],[43,63,39,63],[43,64,39,64],[43,65,39,65],[43,66,39,66],[44,4,40,4],[44,8,40,8,"options"],[44,15,40,15],[44,16,40,16,"ignore"],[44,22,40,22],[44,24,40,24],[45,6,41,8,"ignoreList"],[45,16,41,18],[45,17,41,19,"push"],[45,21,41,23],[45,22,41,24],[45,25,41,27,"options"],[45,32,41,34],[45,33,41,35,"ignore"],[45,39,41,41],[45,40,41,42],[46,4,42,4],[47,4,43,4],[47,8,43,8],[47,9,43,9,"options"],[47,16,43,16],[47,17,43,17,"preserveApiRoutes"],[47,34,43,34],[47,36,43,36],[48,6,44,8,"ignoreList"],[48,16,44,18],[48,17,44,19,"push"],[48,21,44,23],[48,22,44,24],[48,30,44,32],[48,32,44,34],[48,49,44,51],[48,50,44,52],[49,4,45,4],[50,4,46,4],[50,10,46,10,"rootDirectory"],[50,23,46,23],[50,26,46,26],[51,6,47,8,"files"],[51,11,47,13],[51,13,47,15],[51,17,47,19,"Map"],[51,20,47,22],[51,21,47,23],[51,22,47,24],[52,6,48,8,"subdirectories"],[52,20,48,22],[52,22,48,24],[52,26,48,28,"Map"],[52,29,48,31],[52,30,48,32],[53,4,49,4],[53,5,49,5],[54,4,50,4],[54,8,50,8,"hasRoutes"],[54,17,50,17],[54,20,50,20],[54,25,50,25],[55,4,51,4],[55,8,51,8,"isValid"],[55,15,51,15],[55,18,51,18],[55,23,51,23],[56,4,52,4],[56,10,52,10,"contextKeys"],[56,21,52,21],[56,24,52,24,"contextModule"],[56,37,52,37],[56,38,52,38,"keys"],[56,42,52,42],[56,43,52,43],[56,44,52,44],[57,4,53,4],[57,10,53,10,"redirects"],[57,19,53,19],[57,22,53,22],[57,23,53,23],[57,24,53,24],[58,4,54,4],[58,10,54,10,"rewrites"],[58,18,54,18],[58,21,54,21],[58,22,54,22],[58,23,54,23],[59,4,55,4],[59,8,55,8,"validRedirectDestinations"],[59,33,55,33],[60,4,56,4],[61,4,57,4],[62,4,58,4],[62,8,58,8,"options"],[62,15,58,15],[62,16,58,16,"preserveRedirectAndRewrites"],[62,43,58,43],[62,45,58,45],[63,6,59,8],[63,10,59,12,"options"],[63,17,59,19],[63,18,59,20,"redirects"],[63,27,59,29],[63,29,59,31],[64,8,60,12],[64,13,60,17],[64,19,60,23,"redirect"],[64,27,60,31],[64,31,60,35,"options"],[64,38,60,42],[64,39,60,43,"redirects"],[64,48,60,52],[64,50,60,54],[65,10,61,16],[66,10,62,16],[66,16,62,22,"source"],[66,22,62,28],[66,25,62,31,"redirect"],[66,33,62,39],[66,34,62,40,"source"],[66,40,62,46],[66,41,62,47,"replace"],[66,48,62,54],[66,49,62,55],[66,57,62,63],[66,59,62,65],[66,61,62,67],[66,62,62,68],[67,10,63,16],[67,16,63,22,"isExternalRedirect"],[67,34,63,40],[67,37,63,43],[67,38,63,44],[67,39,63,45],[67,41,63,47,"url_1"],[67,46,63,52],[67,47,63,53,"shouldLinkExternally"],[67,67,63,73],[67,69,63,75,"redirect"],[67,77,63,83],[67,78,63,84,"destination"],[67,89,63,95],[67,90,63,96],[68,10,64,16],[68,16,64,22,"targetDestination"],[68,33,64,39],[68,36,64,42,"isExternalRedirect"],[68,54,64,60],[68,57,65,22,"redirect"],[68,65,65,30],[68,66,65,31,"destination"],[68,77,65,42],[68,80,66,22],[68,81,66,23],[68,82,66,24],[68,84,66,26,"matchers_1"],[68,94,66,36],[68,95,66,37,"stripInvisibleSegmentsFromPath"],[68,125,66,67],[68,127,66,69],[68,128,66,70],[68,129,66,71],[68,131,66,73,"matchers_1"],[68,141,66,83],[68,142,66,84,"removeFileSystemDots"],[68,162,66,104],[68,164,66,106],[68,165,66,107],[68,166,66,108],[68,168,66,110,"matchers_1"],[68,178,66,120],[68,179,66,121,"removeFileSystemExtensions"],[68,205,66,147],[68,207,66,149,"redirect"],[68,215,66,157],[68,216,66,158,"destination"],[68,227,66,169],[68,228,66,170,"replace"],[68,235,66,177],[68,236,66,178],[68,245,66,187],[68,247,66,189],[68,249,66,191],[68,250,66,192],[68,251,66,193],[68,252,66,194],[68,253,66,195],[69,10,67,16],[69,16,67,22,"normalizedSource"],[69,32,67,38],[69,35,67,41],[69,36,67,42],[69,37,67,43],[69,39,67,45,"matchers_1"],[69,49,67,55],[69,50,67,56,"removeFileSystemDots"],[69,70,67,76],[69,72,67,78],[69,73,67,79],[69,74,67,80],[69,76,67,82,"matchers_1"],[69,86,67,92],[69,87,67,93,"removeSupportedExtensions"],[69,112,67,118],[69,114,67,120,"source"],[69,120,67,126],[69,121,67,127],[69,122,67,128],[70,10,68,16],[70,14,68,20,"ignoreList"],[70,24,68,30],[70,25,68,31,"some"],[70,29,68,35],[70,30,68,37,"regex"],[70,35,68,42],[70,39,68,47,"regex"],[70,44,68,52],[70,45,68,53,"test"],[70,49,68,57],[70,50,68,58,"normalizedSource"],[70,66,68,74],[70,67,68,75],[70,68,68,76],[70,70,68,78],[71,12,69,20],[72,10,70,16],[73,10,71,16],[74,10,72,16,"validRedirectDestinations"],[74,35,72,41],[74,40,72,46,"contextKeys"],[74,51,72,57],[74,52,72,58,"map"],[74,55,72,61],[74,56,72,63,"key"],[74,59,72,66],[74,63,72,71],[75,12,73,20],[75,19,73,27],[75,20,74,24],[75,21,74,25],[75,22,74,26],[75,24,74,28,"matchers_1"],[75,34,74,38],[75,35,74,39,"stripInvisibleSegmentsFromPath"],[75,65,74,69],[75,67,74,71],[75,68,74,72],[75,69,74,73],[75,71,74,75,"matchers_1"],[75,81,74,85],[75,82,74,86,"removeFileSystemDots"],[75,102,74,106],[75,104,74,108],[75,105,74,109],[75,106,74,110],[75,108,74,112,"matchers_1"],[75,118,74,122],[75,119,74,123,"removeSupportedExtensions"],[75,144,74,148],[75,146,74,150,"key"],[75,149,74,153],[75,150,74,154],[75,151,74,155],[75,152,74,156],[75,154,75,24,"key"],[75,157,75,27],[75,158,76,21],[76,10,77,16],[76,11,77,17],[76,12,77,18],[77,10,78,16],[77,16,78,22,"destination"],[77,27,78,33],[77,30,78,36,"isExternalRedirect"],[77,48,78,54],[77,51,79,22,"targetDestination"],[77,68,79,39],[77,71,80,22,"validRedirectDestinations"],[77,96,80,47],[77,97,80,48,"find"],[77,101,80,52],[77,102,80,54,"key"],[77,105,80,57],[77,109,80,62,"key"],[77,112,80,65],[77,113,80,66],[77,114,80,67],[77,115,80,68],[77,120,80,73,"targetDestination"],[77,137,80,90],[77,138,80,91],[77,141,80,94],[77,142,80,95],[77,143,80,96],[78,10,81,16],[78,14,81,20],[78,15,81,21,"destination"],[78,26,81,32],[78,28,81,34],[79,12,82,20],[80,0,83,0],[81,0,84,0],[82,0,85,0],[83,0,86,0],[84,0,87,0],[85,12,88,20],[85,16,88,24,"options"],[85,23,88,31],[85,24,88,32,"preserveApiRoutes"],[85,41,88,49],[85,43,88,51],[86,14,89,24],[86,20,89,30],[86,24,89,34,"Error"],[86,29,89,39],[86,30,89,40],[86,55,89,65,"redirect"],[86,63,89,73],[86,64,89,74,"destination"],[86,75,89,85],[86,94,89,104],[86,95,89,105],[87,12,90,20],[88,12,91,20],[89,10,92,16],[90,10,93,16],[90,16,93,22,"fakeContextKey"],[90,30,93,36],[90,33,93,39],[90,34,93,40],[90,35,93,41],[90,37,93,43,"matchers_1"],[90,47,93,53],[90,48,93,54,"removeFileSystemDots"],[90,68,93,74],[90,70,93,76],[90,71,93,77],[90,72,93,78],[90,74,93,80,"matchers_1"],[90,84,93,90],[90,85,93,91,"removeSupportedExtensions"],[90,110,93,116],[90,112,93,118,"source"],[90,118,93,124],[90,119,93,125],[90,120,93,126],[91,10,94,16,"contextKeys"],[91,21,94,27],[91,22,94,28,"push"],[91,26,94,32],[91,27,94,33,"fakeContextKey"],[91,41,94,47],[91,42,94,48],[92,10,95,16,"redirects"],[92,19,95,25],[92,20,95,26,"fakeContextKey"],[92,34,95,40],[92,35,95,41],[92,38,95,44],[93,12,96,20,"source"],[93,18,96,26],[94,12,97,20,"destination"],[94,23,97,31],[95,12,98,20,"permanent"],[95,21,98,29],[95,23,98,31,"Boolean"],[95,30,98,38],[95,31,98,39,"redirect"],[95,39,98,47],[95,40,98,48,"permanent"],[95,49,98,57],[95,50,98,58],[96,12,99,20,"external"],[96,20,99,28],[96,22,99,30,"isExternalRedirect"],[96,40,99,48],[97,12,100,20,"methods"],[97,19,100,27],[97,21,100,29,"redirect"],[97,29,100,37],[97,30,100,38,"methods"],[98,10,101,16],[98,11,101,17],[99,8,102,12],[100,6,103,8],[101,6,104,8],[101,10,104,12,"options"],[101,17,104,19],[101,18,104,20,"rewrites"],[101,26,104,28],[101,28,104,30],[102,8,105,12],[102,13,105,17],[102,19,105,23,"rewrite"],[102,26,105,30],[102,30,105,34,"options"],[102,37,105,41],[102,38,105,42,"rewrites"],[102,46,105,50],[102,48,105,52],[103,10,106,16],[104,10,107,16],[104,16,107,22,"source"],[104,22,107,28],[104,25,107,31,"rewrite"],[104,32,107,38],[104,33,107,39,"source"],[104,39,107,45],[104,40,107,46,"replace"],[104,47,107,53],[104,48,107,54],[104,56,107,62],[104,58,107,64],[104,60,107,66],[104,61,107,67],[105,10,108,16],[105,16,108,22,"targetDestination"],[105,33,108,39],[105,36,108,42],[105,37,108,43],[105,38,108,44],[105,40,108,46,"matchers_1"],[105,50,108,56],[105,51,108,57,"stripInvisibleSegmentsFromPath"],[105,81,108,87],[105,83,108,89],[105,84,108,90],[105,85,108,91],[105,87,108,93,"matchers_1"],[105,97,108,103],[105,98,108,104,"removeFileSystemDots"],[105,118,108,124],[105,120,108,126],[105,121,108,127],[105,122,108,128],[105,124,108,130,"matchers_1"],[105,134,108,140],[105,135,108,141,"removeSupportedExtensions"],[105,160,108,166],[105,162,108,168,"rewrite"],[105,169,108,175],[105,170,108,176,"destination"],[105,181,108,187],[105,182,108,188],[105,183,108,189],[105,184,108,190],[106,10,109,16],[106,16,109,22,"normalizedSource"],[106,32,109,38],[106,35,109,41],[106,36,109,42],[106,37,109,43],[106,39,109,45,"matchers_1"],[106,49,109,55],[106,50,109,56,"removeFileSystemDots"],[106,70,109,76],[106,72,109,78],[106,73,109,79],[106,74,109,80],[106,76,109,82,"matchers_1"],[106,86,109,92],[106,87,109,93,"removeSupportedExtensions"],[106,112,109,118],[106,114,109,120,"source"],[106,120,109,126],[106,121,109,127],[106,122,109,128],[107,10,110,16],[107,14,110,20,"ignoreList"],[107,24,110,30],[107,25,110,31,"some"],[107,29,110,35],[107,30,110,37,"regex"],[107,35,110,42],[107,39,110,47,"regex"],[107,44,110,52],[107,45,110,53,"test"],[107,49,110,57],[107,50,110,58,"normalizedSource"],[107,66,110,74],[107,67,110,75],[107,68,110,76],[107,70,110,78],[108,12,111,20],[109,10,112,16],[110,10,113,16],[111,10,114,16,"validRedirectDestinations"],[111,35,114,41],[111,40,114,46,"contextKeys"],[111,51,114,57],[111,52,114,58,"map"],[111,55,114,61],[111,56,114,63,"key"],[111,59,114,66],[111,63,114,71],[112,12,115,20],[112,19,115,27],[112,20,116,24],[112,21,116,25],[112,22,116,26],[112,24,116,28,"matchers_1"],[112,34,116,38],[112,35,116,39,"stripInvisibleSegmentsFromPath"],[112,65,116,69],[112,67,116,71],[112,68,116,72],[112,69,116,73],[112,71,116,75,"matchers_1"],[112,81,116,85],[112,82,116,86,"removeFileSystemDots"],[112,102,116,106],[112,104,116,108],[112,105,116,109],[112,106,116,110],[112,108,116,112,"matchers_1"],[112,118,116,122],[112,119,116,123,"removeSupportedExtensions"],[112,144,116,148],[112,146,116,150,"key"],[112,149,116,153],[112,150,116,154],[112,151,116,155],[112,152,116,156],[112,154,117,24,"key"],[112,157,117,27],[112,158,118,21],[113,10,119,16],[113,11,119,17],[113,12,119,18],[114,10,120,16],[114,16,120,22,"destination"],[114,27,120,33],[114,30,120,36,"validRedirectDestinations"],[114,55,120,61],[114,56,120,62,"find"],[114,60,120,66],[114,61,120,68,"key"],[114,64,120,71],[114,68,120,76,"key"],[114,71,120,79],[114,72,120,80],[114,73,120,81],[114,74,120,82],[114,79,120,87,"targetDestination"],[114,96,120,104],[114,97,120,105],[114,100,120,108],[114,101,120,109],[114,102,120,110],[115,10,121,16],[115,14,121,20],[115,15,121,21,"destination"],[115,26,121,32],[115,28,121,34],[116,12,122,20],[117,0,123,0],[118,0,124,0],[119,0,125,0],[120,0,126,0],[121,0,127,0],[122,12,128,20],[122,16,128,24,"options"],[122,23,128,31],[122,24,128,32,"preserveApiRoutes"],[122,41,128,49],[122,43,128,51],[123,14,129,24],[123,20,129,30],[123,24,129,34,"Error"],[123,29,129,39],[123,30,129,40],[123,55,129,65,"rewrite"],[123,62,129,72],[123,63,129,73,"destination"],[123,74,129,84],[123,93,129,103],[123,94,129,104],[124,12,130,20],[125,12,131,20],[126,10,132,16],[127,10,133,16],[128,10,134,16],[128,16,134,22,"fakeContextKey"],[128,30,134,36],[128,33,134,39],[128,38,134,44,"source"],[128,44,134,50],[128,50,134,56],[129,10,135,16,"contextKeys"],[129,21,135,27],[129,22,135,28,"push"],[129,26,135,32],[129,27,135,33,"fakeContextKey"],[129,41,135,47],[129,42,135,48],[130,10,136,16,"rewrites"],[130,18,136,24],[130,19,136,25,"fakeContextKey"],[130,33,136,39],[130,34,136,40],[130,37,136,43],[131,12,136,45,"source"],[131,18,136,51],[132,12,136,53,"destination"],[132,23,136,64],[133,12,136,66,"methods"],[133,19,136,73],[133,21,136,75,"rewrite"],[133,28,136,82],[133,29,136,83,"methods"],[134,10,136,91],[134,11,136,92],[135,8,137,12],[136,6,138,8],[137,4,139,4],[138,4,140,4],[138,9,140,9],[138,15,140,15,"filePath"],[138,23,140,23],[138,27,140,27,"contextKeys"],[138,38,140,38],[138,40,140,40],[139,6,141,8],[139,10,141,12,"ignoreList"],[139,20,141,22],[139,21,141,23,"some"],[139,25,141,27],[139,26,141,29,"regex"],[139,31,141,34],[139,35,141,39,"regex"],[139,40,141,44],[139,41,141,45,"test"],[139,45,141,49],[139,46,141,50,"filePath"],[139,54,141,58],[139,55,141,59],[139,56,141,60],[139,58,141,62],[140,8,142,12],[141,6,143,8],[142,6,144,8,"isValid"],[142,13,144,15],[142,16,144,18],[142,20,144,22],[143,6,145,8],[143,12,145,14,"meta"],[143,16,145,18],[143,19,145,21,"getFileMeta"],[143,30,145,32],[143,31,145,33,"filePath"],[143,39,145,41],[143,41,145,43,"options"],[143,48,145,50],[143,50,145,52,"redirects"],[143,59,145,61],[143,61,145,63,"rewrites"],[143,69,145,71],[143,70,145,72],[144,6,146,8],[145,6,147,8],[145,10,147,12,"meta"],[145,14,147,16],[145,15,147,17,"specificity"],[145,26,147,28],[145,29,147,31],[145,30,147,32],[145,32,147,34],[146,8,148,12],[147,6,149,8],[148,6,150,8],[148,10,150,12,"node"],[148,14,150,16],[148,17,150,19],[149,8,151,12,"type"],[149,12,151,16],[149,14,151,18,"meta"],[149,18,151,22],[149,19,151,23,"isApi"],[149,24,151,28],[149,27,151,31],[149,32,151,36],[149,35,151,39,"meta"],[149,39,151,43],[149,40,151,44,"isLayout"],[149,48,151,52],[149,51,151,55],[149,59,151,63],[149,62,151,66],[149,69,151,73],[150,8,152,12,"loadRoute"],[150,17,152,21,"loadRoute"],[150,18,152,21],[150,20,152,24],[151,10,153,16],[151,14,153,20,"routeModule"],[151,25,153,31],[152,10,154,16],[152,14,154,20,"options"],[152,21,154,27],[152,22,154,28,"ignoreRequireErrors"],[152,41,154,47],[152,43,154,49],[153,12,155,20],[153,16,155,24],[154,14,156,24,"routeModule"],[154,25,156,35],[154,28,156,38,"contextModule"],[154,41,156,51],[154,42,156,52,"filePath"],[154,50,156,60],[154,51,156,61],[155,12,157,20],[155,13,157,21],[155,14,158,20],[155,20,158,26],[156,14,159,24,"routeModule"],[156,25,159,35],[156,28,159,38],[156,29,159,39],[156,30,159,40],[157,12,160,20],[158,10,161,16],[158,11,161,17],[158,17,162,21],[159,12,163,20,"routeModule"],[159,23,163,31],[159,26,163,34,"contextModule"],[159,39,163,47],[159,40,163,48,"filePath"],[159,48,163,56],[159,49,163,57],[160,10,164,16],[161,10,165,16],[161,14,165,20,"process"],[161,21,165,27],[161,22,165,28,"env"],[161,25,165,31],[161,26,165,32,"NODE_ENV"],[161,34,165,40],[161,39,165,45],[161,52,165,58],[161,56,165,62,"importMode"],[161,66,165,72],[161,71,165,77],[161,77,165,83],[161,79,165,85],[162,12,166,20],[163,12,167,20],[164,12,168,20],[164,16,168,24,"routeModule"],[164,27,168,35],[164,39,168,47,"Promise"],[164,46,168,54],[164,48,168,56],[165,14,169,24],[165,20,169,30],[165,24,169,34,"Error"],[165,29,169,39],[165,30,169,40],[165,40,169,50,"filePath"],[165,48,169,58],[165,102,169,112],[165,103,169,113],[166,12,170,20],[167,12,171,20],[167,18,171,26,"defaultExport"],[167,31,171,39],[167,34,171,42,"routeModule"],[167,45,171,53],[167,47,171,55,"default"],[167,54,171,62],[168,12,172,20],[168,16,172,24,"defaultExport"],[168,29,172,37],[168,41,172,49,"Promise"],[168,48,172,56],[168,50,172,58],[169,14,173,24],[169,20,173,30],[169,24,173,34,"Error"],[169,29,173,39],[169,30,173,40],[169,64,173,74,"filePath"],[169,72,173,82],[169,148,173,158],[169,149,173,159],[170,12,174,20],[171,12,175,20],[172,12,176,20],[172,16,176,24,"defaultExport"],[172,29,176,37],[172,41,176,49,"Function"],[172,49,176,57],[173,12,177,24],[174,12,178,24,"defaultExport"],[174,25,178,37],[174,26,178,38,"constructor"],[174,37,178,49],[174,38,178,50,"name"],[174,42,178,54],[174,47,178,59],[174,62,178,74],[174,64,178,76],[175,14,179,24],[175,20,179,30],[175,24,179,34,"Error"],[175,29,179,39],[175,30,179,40],[175,64,179,74,"filePath"],[175,72,179,82],[175,156,179,166],[175,157,179,167],[176,12,180,20],[177,10,181,16],[178,10,182,16],[178,17,182,23,"routeModule"],[178,28,182,34],[179,8,183,12],[179,9,183,13],[180,8,184,12,"contextKey"],[180,18,184,22],[180,20,184,24,"filePath"],[180,28,184,32],[181,8,185,12,"route"],[181,13,185,17],[181,15,185,19],[181,17,185,21],[182,8,185,23],[183,8,186,12,"dynamic"],[183,15,186,19],[183,17,186,21],[183,21,186,25],[184,8,187,12,"children"],[184,16,187,20],[184,18,187,22],[184,20,187,24],[184,21,187,26],[185,6,188,8],[185,7,188,9],[186,6,189,8],[186,10,189,12,"meta"],[186,14,189,16],[186,15,189,17,"isRedirect"],[186,25,189,27],[186,27,189,29],[187,8,190,12,"node"],[187,12,190,16],[187,13,190,17,"destinationContextKey"],[187,34,190,38],[187,37,190,41,"redirects"],[187,46,190,50],[187,47,190,51,"filePath"],[187,55,190,59],[187,56,190,60],[187,57,190,61,"destination"],[187,68,190,72],[188,8,191,12,"node"],[188,12,191,16],[188,13,191,17,"permanent"],[188,22,191,26],[188,25,191,29,"redirects"],[188,34,191,38],[188,35,191,39,"filePath"],[188,43,191,47],[188,44,191,48],[188,45,191,49,"permanent"],[188,54,191,58],[189,8,192,12,"node"],[189,12,192,16],[189,13,192,17,"generated"],[189,22,192,26],[189,25,192,29],[189,29,192,33],[190,8,193,12],[190,12,193,16,"node"],[190,16,193,20],[190,17,193,21,"type"],[190,21,193,25],[190,26,193,30],[190,33,193,37],[190,35,193,39],[191,10,194,16,"node"],[191,14,194,20],[191,17,194,23,"options"],[191,24,194,30],[191,25,194,31,"getSystemRoute"],[191,39,194,45],[191,40,194,46],[192,12,195,20,"type"],[192,16,195,24],[192,18,195,26],[192,28,195,36],[193,12,196,20,"route"],[193,17,196,25],[193,19,196,27],[193,20,196,28],[193,21,196,29],[193,23,196,31,"matchers_1"],[193,33,196,41],[193,34,196,42,"removeFileSystemDots"],[193,54,196,62],[193,56,196,64],[193,57,196,65],[193,58,196,66],[193,60,196,68,"matchers_1"],[193,70,196,78],[193,71,196,79,"removeSupportedExtensions"],[193,96,196,104],[193,98,196,106,"node"],[193,102,196,110],[193,103,196,111,"destinationContextKey"],[193,124,196,132],[193,125,196,133],[194,10,197,16],[194,11,197,17],[194,13,197,19,"node"],[194,17,197,23],[194,18,197,24],[195,8,198,12],[196,8,199,12],[196,12,199,16,"redirects"],[196,21,199,25],[196,22,199,26,"filePath"],[196,30,199,34],[196,31,199,35],[196,32,199,36,"methods"],[196,39,199,43],[196,41,199,45],[197,10,200,16,"node"],[197,14,200,20],[197,15,200,21,"methods"],[197,22,200,28],[197,25,200,31,"redirects"],[197,34,200,40],[197,35,200,41,"filePath"],[197,43,200,49],[197,44,200,50],[197,45,200,51,"methods"],[197,52,200,58],[198,8,201,12],[199,8,202,12,"node"],[199,12,202,16],[199,13,202,17,"type"],[199,17,202,21],[199,20,202,24],[199,30,202,34],[200,6,203,8],[201,6,204,8],[201,10,204,12,"meta"],[201,14,204,16],[201,15,204,17,"isRewrite"],[201,24,204,26],[201,26,204,28],[202,8,205,12,"node"],[202,12,205,16],[202,13,205,17,"destinationContextKey"],[202,34,205,38],[202,37,205,41,"rewrites"],[202,45,205,49],[202,46,205,50,"filePath"],[202,54,205,58],[202,55,205,59],[202,56,205,60,"destination"],[202,67,205,71],[203,8,206,12,"node"],[203,12,206,16],[203,13,206,17,"generated"],[203,22,206,26],[203,25,206,29],[203,29,206,33],[204,8,207,12],[204,12,207,16,"node"],[204,16,207,20],[204,17,207,21,"type"],[204,21,207,25],[204,26,207,30],[204,33,207,37],[204,35,207,39],[205,10,208,16,"node"],[205,14,208,20],[205,17,208,23,"options"],[205,24,208,30],[205,25,208,31,"getSystemRoute"],[205,39,208,45],[205,40,208,46],[206,12,209,20,"type"],[206,16,209,24],[206,18,209,26],[206,27,209,35],[207,12,210,20,"route"],[207,17,210,25],[207,19,210,27],[207,20,210,28],[207,21,210,29],[207,23,210,31,"matchers_1"],[207,33,210,41],[207,34,210,42,"removeFileSystemDots"],[207,54,210,62],[207,56,210,64],[207,57,210,65],[207,58,210,66],[207,60,210,68,"matchers_1"],[207,70,210,78],[207,71,210,79,"removeSupportedExtensions"],[207,96,210,104],[207,98,210,106,"node"],[207,102,210,110],[207,103,210,111,"destinationContextKey"],[207,124,210,132],[207,125,210,133],[208,10,211,16],[208,11,211,17],[208,13,211,19,"node"],[208,17,211,23],[208,18,211,24],[209,8,212,12],[210,8,213,12],[210,12,213,16,"redirects"],[210,21,213,25],[210,22,213,26,"filePath"],[210,30,213,34],[210,31,213,35],[210,32,213,36,"methods"],[210,39,213,43],[210,41,213,45],[211,10,214,16,"node"],[211,14,214,20],[211,15,214,21,"methods"],[211,22,214,28],[211,25,214,31,"redirects"],[211,34,214,40],[211,35,214,41,"filePath"],[211,43,214,49],[211,44,214,50],[211,45,214,51,"methods"],[211,52,214,58],[212,8,215,12],[213,8,216,12,"node"],[213,12,216,16],[213,13,216,17,"type"],[213,17,216,21],[213,20,216,24],[213,29,216,33],[214,6,217,8],[215,6,218,8],[215,10,218,12,"process"],[215,17,218,19],[215,18,218,20,"env"],[215,21,218,23],[215,22,218,24,"NODE_ENV"],[215,30,218,32],[215,35,218,37],[215,48,218,50],[215,50,218,52],[216,8,219,12],[217,8,220,12],[218,8,221,12],[218,12,221,16,"node"],[218,16,221,20],[218,17,221,21,"type"],[218,21,221,25],[218,26,221,30],[218,31,221,35],[218,35,221,39,"importMode"],[218,45,221,49],[218,50,221,54],[218,56,221,60],[218,58,221,62],[219,10,222,16],[219,16,222,22,"routeItem"],[219,25,222,31],[219,28,222,34,"node"],[219,32,222,38],[219,33,222,39,"loadRoute"],[219,42,222,48],[219,43,222,49],[219,44,222,50],[220,10,223,16],[221,10,224,16],[221,16,224,22,"route"],[221,21,224,27],[221,24,224,30,"routeItem"],[221,33,224,39],[221,35,224,41,"default"],[221,42,224,48],[222,10,225,16],[222,14,225,20,"route"],[222,19,225,25],[222,23,225,29],[222,27,225,33],[222,29,225,35],[223,12,226,20],[224,12,227,20,"console"],[224,19,227,27],[224,20,227,28,"warn"],[224,24,227,32],[224,25,227,33],[224,35,227,43,"filePath"],[224,43,227,51],[224,135,227,143],[224,136,227,144],[225,12,228,20],[226,10,229,16],[227,10,230,16],[227,14,230,20],[227,15,230,21],[227,24,230,30],[227,26,230,32],[227,34,230,40],[227,36,230,42],[227,44,230,50],[227,45,230,51],[227,46,230,52,"includes"],[227,54,230,60],[227,55,230,61],[227,62,230,68,"route"],[227,67,230,73],[227,68,230,74],[227,70,230,76],[228,12,231,20],[228,18,231,26],[228,22,231,30,"Error"],[228,27,231,35],[228,28,231,36],[228,62,231,70,"filePath"],[228,70,231,78],[228,100,231,108],[228,107,231,115,"route"],[228,112,231,120],[228,189,231,197],[228,190,231,198],[229,10,232,16],[230,8,233,12],[231,6,234,8],[232,6,235,8],[233,0,236,0],[234,0,237,0],[235,0,238,0],[236,6,239,8],[236,11,239,13],[236,17,239,19,"route"],[236,22,239,24],[236,26,239,28,"extrapolateGroups"],[236,43,239,45],[236,44,239,46,"meta"],[236,48,239,50],[236,49,239,51,"route"],[236,54,239,56],[236,55,239,57],[236,57,239,59],[237,8,240,12],[238,8,241,12],[238,14,241,18,"subdirectoryParts"],[238,31,241,35],[238,34,241,38,"route"],[238,39,241,43],[238,40,241,44,"split"],[238,45,241,49],[238,46,241,50],[238,49,241,53],[238,50,241,54],[238,51,241,55,"slice"],[238,56,241,60],[238,57,241,61],[238,58,241,62],[238,60,241,64],[238,61,241,65],[238,62,241,66],[238,63,241,67],[239,8,242,12],[240,8,243,12],[240,12,243,16,"directory"],[240,21,243,25],[240,24,243,28,"rootDirectory"],[240,37,243,41],[241,8,244,12],[241,13,244,17],[241,19,244,23,"part"],[241,23,244,27],[241,27,244,31,"subdirectoryParts"],[241,44,244,48],[241,46,244,50],[242,10,245,16],[242,14,245,20,"subDirectory"],[242,26,245,32],[242,29,245,35,"directory"],[242,38,245,44],[242,39,245,45,"subdirectories"],[242,53,245,59],[242,54,245,60,"get"],[242,57,245,63],[242,58,245,64,"part"],[242,62,245,68],[242,63,245,69],[243,10,246,16],[244,10,247,16],[244,14,247,20],[244,15,247,21,"subDirectory"],[244,27,247,33],[244,29,247,35],[245,12,248,20,"subDirectory"],[245,24,248,32],[245,27,248,35],[246,14,249,24,"files"],[246,19,249,29],[246,21,249,31],[246,25,249,35,"Map"],[246,28,249,38],[246,29,249,39],[246,30,249,40],[247,14,250,24,"subdirectories"],[247,28,250,38],[247,30,250,40],[247,34,250,44,"Map"],[247,37,250,47],[247,38,250,48],[248,12,251,20],[248,13,251,21],[249,12,252,20,"directory"],[249,21,252,29],[249,22,252,30,"subdirectories"],[249,36,252,44],[249,37,252,45,"set"],[249,40,252,48],[249,41,252,49,"part"],[249,45,252,53],[249,47,252,55,"subDirectory"],[249,59,252,67],[249,60,252,68],[250,10,253,16],[251,10,254,16,"directory"],[251,19,254,25],[251,22,254,28,"subDirectory"],[251,34,254,40],[252,8,255,12],[253,8,256,12],[254,8,257,12,"node"],[254,12,257,16],[254,15,257,19],[255,10,257,21],[255,13,257,24,"node"],[255,17,257,28],[256,10,257,30,"route"],[257,8,257,36],[257,9,257,37],[258,8,258,12],[258,12,258,16,"meta"],[258,16,258,20],[258,17,258,21,"isLayout"],[258,25,258,29],[258,27,258,31],[259,10,259,16,"directory"],[259,19,259,25],[259,20,259,26,"layout"],[259,26,259,32],[259,31,259,37],[259,33,259,39],[260,10,260,16],[260,16,260,22,"existing"],[260,24,260,30],[260,27,260,33,"directory"],[260,36,260,42],[260,37,260,43,"layout"],[260,43,260,49],[260,44,260,50,"meta"],[260,48,260,54],[260,49,260,55,"specificity"],[260,60,260,66],[260,61,260,67],[261,10,261,16],[261,14,261,20,"existing"],[261,22,261,28],[261,24,261,30],[262,12,262,20],[263,12,263,20],[263,16,263,24,"process"],[263,23,263,31],[263,24,263,32,"env"],[263,27,263,35],[263,28,263,36,"NODE_ENV"],[263,36,263,44],[263,41,263,49],[263,53,263,61],[263,55,263,63],[264,14,264,24],[264,20,264,30],[264,24,264,34,"Error"],[264,29,264,39],[264,30,264,40],[264,46,264,56,"filePath"],[264,54,264,64],[264,64,264,74,"existing"],[264,72,264,82],[264,73,264,83,"contextKey"],[264,83,264,93],[264,112,264,122,"route"],[264,117,264,127],[264,158,264,168],[264,159,264,169],[265,12,265,20],[266,10,266,16],[266,11,266,17],[266,17,267,21],[267,12,268,20,"node"],[267,16,268,24],[267,19,268,27,"getLayoutNode"],[267,32,268,40],[267,33,268,41,"node"],[267,37,268,45],[267,39,268,47,"options"],[267,46,268,54],[267,47,268,55],[268,12,269,20,"directory"],[268,21,269,29],[268,22,269,30,"layout"],[268,28,269,36],[268,29,269,37,"meta"],[268,33,269,41],[268,34,269,42,"specificity"],[268,45,269,53],[268,46,269,54],[268,49,269,57,"node"],[268,53,269,61],[269,10,270,16],[270,8,271,12],[270,9,271,13],[270,15,272,17],[270,19,272,21,"meta"],[270,23,272,25],[270,24,272,26,"isApi"],[270,29,272,31],[270,31,272,33],[271,10,273,16],[271,16,273,22,"fileKey"],[271,23,273,29],[271,26,273,32],[271,29,273,35,"route"],[271,34,273,40],[271,40,273,46],[272,10,274,16],[272,14,274,20,"nodes"],[272,19,274,25],[272,22,274,28,"directory"],[272,31,274,37],[272,32,274,38,"files"],[272,37,274,43],[272,38,274,44,"get"],[272,41,274,47],[272,42,274,48,"fileKey"],[272,49,274,55],[272,50,274,56],[273,10,275,16],[273,14,275,20],[273,15,275,21,"nodes"],[273,20,275,26],[273,22,275,28],[274,12,276,20,"nodes"],[274,17,276,25],[274,20,276,28],[274,22,276,30],[275,12,277,20,"directory"],[275,21,277,29],[275,22,277,30,"files"],[275,27,277,35],[275,28,277,36,"set"],[275,31,277,39],[275,32,277,40,"fileKey"],[275,39,277,47],[275,41,277,49,"nodes"],[275,46,277,54],[275,47,277,55],[276,10,278,16],[277,10,279,16],[278,10,280,16],[278,16,280,22,"existing"],[278,24,280,30],[278,27,280,33,"nodes"],[278,32,280,38],[278,33,280,39],[278,34,280,40],[278,35,280,41],[279,10,281,16],[279,14,281,20,"existing"],[279,22,281,28],[279,24,281,30],[280,12,282,20],[281,12,283,20],[281,16,283,24,"process"],[281,23,283,31],[281,24,283,32,"env"],[281,27,283,35],[281,28,283,36,"NODE_ENV"],[281,36,283,44],[281,41,283,49],[281,53,283,61],[281,55,283,63],[282,14,284,24],[282,20,284,30],[282,24,284,34,"Error"],[282,29,284,39],[282,30,284,40],[282,53,284,63,"filePath"],[282,61,284,71],[282,71,284,81,"existing"],[282,79,284,89],[282,80,284,90,"contextKey"],[282,90,284,100],[282,119,284,129,"route"],[282,124,284,134],[282,165,284,175],[282,166,284,176],[283,12,285,20],[284,10,286,16],[284,11,286,17],[284,17,287,21],[285,12,288,20,"nodes"],[285,17,288,25],[285,18,288,26],[285,19,288,27],[285,20,288,28],[285,23,288,31,"node"],[285,27,288,35],[286,10,289,16],[287,8,290,12],[287,9,290,13],[287,15,291,17],[288,10,292,16],[288,14,292,20,"nodes"],[288,19,292,25],[288,22,292,28,"directory"],[288,31,292,37],[288,32,292,38,"files"],[288,37,292,43],[288,38,292,44,"get"],[288,41,292,47],[288,42,292,48,"route"],[288,47,292,53],[288,48,292,54],[289,10,293,16],[289,14,293,20],[289,15,293,21,"nodes"],[289,20,293,26],[289,22,293,28],[290,12,294,20,"nodes"],[290,17,294,25],[290,20,294,28],[290,22,294,30],[291,12,295,20,"directory"],[291,21,295,29],[291,22,295,30,"files"],[291,27,295,35],[291,28,295,36,"set"],[291,31,295,39],[291,32,295,40,"route"],[291,37,295,45],[291,39,295,47,"nodes"],[291,44,295,52],[291,45,295,53],[292,10,296,16],[293,10,297,16],[294,0,298,0],[295,0,299,0],[296,0,300,0],[297,0,301,0],[298,0,302,0],[299,10,303,16],[299,16,303,22,"existing"],[299,24,303,30],[299,27,303,33,"nodes"],[299,32,303,38],[299,33,303,39,"meta"],[299,37,303,43],[299,38,303,44,"specificity"],[299,49,303,55],[299,50,303,56],[300,10,304,16],[300,14,304,20,"existing"],[300,22,304,28],[300,24,304,30],[301,12,305,20],[302,12,306,20],[302,16,306,24,"process"],[302,23,306,31],[302,24,306,32,"env"],[302,27,306,35],[302,28,306,36,"NODE_ENV"],[302,36,306,44],[302,41,306,49],[302,53,306,61],[302,55,306,63],[303,14,307,24],[303,20,307,30],[303,24,307,34,"Error"],[303,29,307,39],[303,30,307,40],[303,50,307,60,"filePath"],[303,58,307,68],[303,68,307,78,"existing"],[303,76,307,86],[303,77,307,87,"contextKey"],[303,87,307,97],[303,116,307,126,"route"],[303,121,307,131],[303,162,307,172],[303,163,307,173],[304,12,308,20],[305,10,309,16],[305,11,309,17],[305,17,310,21],[306,12,311,20,"hasRoutes"],[306,21,311,29],[306,26,311,34],[306,30,311,38],[307,12,312,20,"nodes"],[307,17,312,25],[307,18,312,26,"meta"],[307,22,312,30],[307,23,312,31,"specificity"],[307,34,312,42],[307,35,312,43],[307,38,312,46,"node"],[307,42,312,50],[308,10,313,16],[309,8,314,12],[310,6,315,8],[311,4,316,4],[312,4,317,4],[313,4,318,4],[313,8,318,8],[313,9,318,9,"isValid"],[313,16,318,16],[313,18,318,18],[314,6,319,8],[314,13,319,15],[314,17,319,19],[315,4,320,4],[316,4,321,4],[317,0,322,0],[318,0,323,0],[319,0,324,0],[320,4,325,4],[320,8,325,8],[320,9,325,9,"rootDirectory"],[320,22,325,22],[320,23,325,23,"layout"],[320,29,325,29],[320,31,325,31],[321,6,326,8,"rootDirectory"],[321,19,326,21],[321,20,326,22,"layout"],[321,26,326,28],[321,29,326,31],[321,30,327,12,"options"],[321,37,327,19],[321,38,327,20,"getSystemRoute"],[321,52,327,34],[321,53,327,35],[322,8,328,16,"type"],[322,12,328,20],[322,14,328,22],[322,22,328,30],[323,8,329,16,"route"],[323,13,329,21],[323,15,329,23],[324,6,330,12],[324,7,330,13],[324,8,330,14],[324,9,331,9],[325,4,332,4],[326,4,333,4],[327,4,334,4],[327,8,334,8],[327,9,334,9,"options"],[327,16,334,16],[327,17,334,17,"skipGenerated"],[327,30,334,30],[327,32,334,32],[328,6,335,8],[328,10,335,12,"hasRoutes"],[328,19,335,21],[328,23,335,25,"options"],[328,30,335,32],[328,31,335,33,"sitemap"],[328,38,335,40],[328,43,335,45],[328,48,335,50],[328,50,335,52],[329,8,336,12,"appendSitemapRoute"],[329,26,336,30],[329,27,336,31,"rootDirectory"],[329,40,336,44],[329,42,336,46,"options"],[329,49,336,53],[329,50,336,54],[330,6,337,8],[331,6,338,8],[331,10,338,12,"options"],[331,17,338,19],[331,18,338,20,"notFound"],[331,26,338,28],[331,31,338,33],[331,36,338,38],[331,38,338,40],[332,8,339,12,"appendNotFoundRoute"],[332,27,339,31],[332,28,339,32,"rootDirectory"],[332,41,339,45],[332,43,339,47,"options"],[332,50,339,54],[332,51,339,55],[333,6,340,8],[334,4,341,4],[335,4,342,4],[335,11,342,11,"rootDirectory"],[335,24,342,24],[336,2,343,0],[337,2,344,0],[338,0,345,0],[339,0,346,0],[340,2,347,0],[340,11,347,9,"flattenDirectoryTreeToRoutes"],[340,39,347,37,"flattenDirectoryTreeToRoutes"],[340,40,347,38,"directory"],[340,49,347,47],[340,51,347,49,"options"],[340,58,347,56],[340,60,348,0],[341,2,349,0,"layout"],[341,8,349,6],[341,10,350,0],[342,2,351,0,"pathToRemove"],[342,14,351,12],[342,17,351,15],[342,19,351,17],[342,21,351,19],[343,4,352,4],[344,0,353,0],[345,0,354,0],[346,4,355,4],[346,8,355,8,"directory"],[346,17,355,17],[346,18,355,18,"layout"],[346,24,355,24],[346,26,355,26],[347,6,356,8],[347,12,356,14,"previousLayout"],[347,26,356,28],[347,29,356,31,"layout"],[347,35,356,37],[348,6,357,8,"layout"],[348,12,357,14],[348,15,357,17,"getMostSpecific"],[348,30,357,32],[348,31,357,33,"directory"],[348,40,357,42],[348,41,357,43,"layout"],[348,47,357,49],[348,48,357,50],[349,6,358,8],[350,6,359,8],[350,10,359,12,"previousLayout"],[350,24,359,26],[350,26,359,28],[351,8,360,12,"previousLayout"],[351,22,360,26],[351,23,360,27,"children"],[351,31,360,35],[351,32,360,36,"push"],[351,36,360,40],[351,37,360,41,"layout"],[351,43,360,47],[351,44,360,48],[352,6,361,8],[353,6,362,8],[353,10,362,12,"options"],[353,17,362,19],[353,18,362,20,"internal_stripLoadRoute"],[353,41,362,43],[353,43,362,45],[354,8,363,12],[354,15,363,19,"layout"],[354,21,363,25],[354,22,363,26,"loadRoute"],[354,31,363,35],[355,6,364,8],[356,6,365,8],[357,6,366,8],[357,12,366,14,"newRoute"],[357,20,366,22],[357,23,366,25,"layout"],[357,29,366,31],[357,30,366,32,"route"],[357,35,366,37],[357,36,366,38,"replace"],[357,43,366,45],[357,44,366,46,"pathToRemove"],[357,56,366,58],[357,58,366,60],[357,60,366,62],[357,61,366,63],[358,6,367,8,"pathToRemove"],[358,18,367,20],[358,21,367,23,"layout"],[358,27,367,29],[358,28,367,30,"route"],[358,33,367,35],[358,36,367,38],[358,39,367,41,"layout"],[358,45,367,47],[358,46,367,48,"route"],[358,51,367,53],[358,54,367,56],[358,57,367,59],[358,59,367,61],[359,6,368,8],[360,6,369,8,"layout"],[360,12,369,14],[360,13,369,15,"route"],[360,18,369,20],[360,21,369,23,"newRoute"],[360,29,369,31],[361,6,370,8,"layout"],[361,12,370,14],[361,13,370,15,"dynamic"],[361,20,370,22],[361,23,370,25,"generateDynamic"],[361,38,370,40],[361,39,370,41,"layout"],[361,45,370,47],[361,46,370,48,"contextKey"],[361,56,370,58],[361,57,370,59,"slice"],[361,62,370,64],[361,63,370,65],[361,64,370,66],[361,65,370,67],[361,66,370,68],[362,4,371,4],[363,4,372,4],[364,4,373,4],[364,8,373,8],[364,9,373,9,"layout"],[364,15,373,15],[364,17,374,8],[364,23,374,14],[364,27,374,18,"Error"],[364,32,374,23],[364,33,374,24],[364,80,374,71],[364,81,374,72],[365,4,375,4],[365,9,375,9],[365,15,375,15,"routes"],[365,21,375,21],[365,25,375,25,"directory"],[365,34,375,34],[365,35,375,35,"files"],[365,40,375,40],[365,41,375,41,"values"],[365,47,375,47],[365,48,375,48],[365,49,375,49],[365,51,375,51],[366,6,376,8],[366,12,376,14,"routeNode"],[366,21,376,23],[366,24,376,26,"getMostSpecific"],[366,39,376,41],[366,40,376,42,"routes"],[366,46,376,48],[366,47,376,49],[367,6,377,8],[368,6,378,8,"routeNode"],[368,15,378,17],[368,16,378,18,"route"],[368,21,378,23],[368,24,378,26,"routeNode"],[368,33,378,35],[368,34,378,36,"route"],[368,39,378,41],[368,40,378,42,"replace"],[368,47,378,49],[368,48,378,50,"pathToRemove"],[368,60,378,62],[368,62,378,64],[368,64,378,66],[368,65,378,67],[369,6,379,8,"routeNode"],[369,15,379,17],[369,16,379,18,"dynamic"],[369,23,379,25],[369,26,379,28,"generateDynamic"],[369,41,379,43],[369,42,379,44,"routeNode"],[369,51,379,53],[369,52,379,54,"route"],[369,57,379,59],[369,58,379,60],[370,6,380,8],[370,10,380,12,"options"],[370,17,380,19],[370,18,380,20,"internal_stripLoadRoute"],[370,41,380,43],[370,43,380,45],[371,8,381,12],[371,15,381,19,"routeNode"],[371,24,381,28],[371,25,381,29,"loadRoute"],[371,34,381,38],[372,6,382,8],[373,6,383,8,"layout"],[373,12,383,14],[373,13,383,15,"children"],[373,21,383,23],[373,22,383,24,"push"],[373,26,383,28],[373,27,383,29,"routeNode"],[373,36,383,38],[373,37,383,39],[374,4,384,4],[375,4,385,4],[376,4,386,4],[376,9,386,9],[376,15,386,15,"child"],[376,20,386,20],[376,24,386,24,"directory"],[376,33,386,33],[376,34,386,34,"subdirectories"],[376,48,386,48],[376,49,386,49,"values"],[376,55,386,55],[376,56,386,56],[376,57,386,57],[376,59,386,59],[377,6,387,8,"flattenDirectoryTreeToRoutes"],[377,34,387,36],[377,35,387,37,"child"],[377,40,387,42],[377,42,387,44,"options"],[377,49,387,51],[377,51,387,53,"layout"],[377,57,387,59],[377,59,387,61,"pathToRemove"],[377,71,387,73],[377,72,387,74],[378,4,388,4],[379,4,389,4],[379,11,389,11,"layout"],[379,17,389,17],[380,2,390,0],[381,2,391,0],[381,11,391,9,"getFileMeta"],[381,22,391,20,"getFileMeta"],[381,23,391,21,"originalKey"],[381,34,391,32],[381,36,391,34,"options"],[381,43,391,41],[381,45,391,43,"redirects"],[381,54,391,52],[381,56,391,54,"rewrites"],[381,64,391,62],[381,66,391,64],[382,4,392,4],[383,4,393,4],[383,10,393,10,"key"],[383,13,393,13],[383,16,393,16],[383,17,393,17],[383,18,393,18],[383,20,393,20,"matchers_1"],[383,30,393,30],[383,31,393,31,"removeSupportedExtensions"],[383,56,393,56],[383,58,393,58],[383,59,393,59],[383,60,393,60],[383,62,393,62,"matchers_1"],[383,72,393,72],[383,73,393,73,"removeFileSystemDots"],[383,93,393,93],[383,95,393,95,"originalKey"],[383,106,393,106],[383,107,393,107],[383,108,393,108],[384,4,394,4],[384,8,394,8,"route"],[384,13,394,13],[384,16,394,16,"key"],[384,19,394,19],[385,4,395,4],[385,10,395,10,"parts"],[385,15,395,15],[385,18,395,18],[385,19,395,19],[385,20,395,20],[385,22,395,22,"matchers_1"],[385,32,395,32],[385,33,395,33,"removeFileSystemDots"],[385,53,395,53],[385,55,395,55,"originalKey"],[385,66,395,66],[385,67,395,67],[385,68,395,68,"split"],[385,73,395,73],[385,74,395,74],[385,77,395,77],[385,78,395,78],[386,4,396,4],[386,10,396,10,"filename"],[386,18,396,18],[386,21,396,21,"parts"],[386,26,396,26],[386,27,396,27,"parts"],[386,32,396,32],[386,33,396,33,"length"],[386,39,396,39],[386,42,396,42],[386,43,396,43],[386,44,396,44],[387,4,397,4],[387,10,397,10],[387,11,397,11,"filenameWithoutExtensions"],[387,36,397,36],[387,38,397,38,"platformExtension"],[387,55,397,55],[387,56,397,56],[387,59,397,59],[387,60,397,60],[387,61,397,61],[387,63,397,63,"matchers_1"],[387,73,397,73],[387,74,397,74,"removeSupportedExtensions"],[387,99,397,99],[387,101,397,101,"filename"],[387,109,397,109],[387,110,397,110],[387,111,397,111,"split"],[387,116,397,116],[387,117,397,117],[387,120,397,120],[387,121,397,121],[388,4,398,4],[388,10,398,10,"isLayout"],[388,18,398,18],[388,21,398,21,"filenameWithoutExtensions"],[388,46,398,46],[388,51,398,51],[388,60,398,60],[389,4,399,4],[389,10,399,10,"isApi"],[389,15,399,15],[389,18,399,18,"originalKey"],[389,29,399,29],[389,30,399,30,"match"],[389,35,399,35],[389,36,399,36],[389,61,399,61],[389,62,399,62],[390,4,400,4],[390,8,400,8,"filenameWithoutExtensions"],[390,33,400,33],[390,34,400,34,"startsWith"],[390,44,400,44],[390,45,400,45],[390,48,400,48],[390,49,400,49],[390,53,400,53,"filenameWithoutExtensions"],[390,78,400,78],[390,79,400,79,"endsWith"],[390,87,400,87],[390,88,400,88],[390,91,400,91],[390,92,400,92],[390,94,400,94],[391,6,401,8],[391,12,401,14],[391,16,401,18,"Error"],[391,21,401,23],[391,22,401,24],[391,39,401,41,"originalKey"],[391,50,401,52],[391,93,401,95],[391,94,401,96],[392,4,402,4],[393,4,403,4],[394,4,404,4],[394,8,404,8],[394,9,404,9,"isApi"],[394,14,404,14],[394,18,404,18,"filename"],[394,26,404,26],[394,27,404,27,"startsWith"],[394,37,404,37],[394,38,404,38],[394,41,404,41],[394,42,404,42],[394,46,404,46,"filenameWithoutExtensions"],[394,71,404,71],[394,76,404,76],[394,88,404,88],[394,90,404,90],[395,6,405,8],[395,12,405,14,"renamedRoute"],[395,24,405,26],[395,27,405,29],[395,28,405,30],[395,31,405,33,"parts"],[395,36,405,38],[395,37,405,39,"slice"],[395,42,405,44],[395,43,405,45],[395,44,405,46],[395,46,405,48],[395,47,405,49],[395,48,405,50],[395,49,405,51],[395,51,405,53,"filename"],[395,59,405,61],[395,60,405,62,"slice"],[395,65,405,67],[395,66,405,68],[395,67,405,69],[395,68,405,70],[395,69,405,71],[395,70,405,72,"join"],[395,74,405,76],[395,75,405,77],[395,78,405,80],[395,79,405,81],[396,6,406,8],[396,12,406,14],[396,16,406,18,"Error"],[396,21,406,23],[396,22,406,24],[396,39,406,41,"originalKey"],[396,50,406,52],[396,118,406,120,"renamedRoute"],[396,130,406,132],[396,133,406,135],[396,134,406,136],[397,4,407,4],[398,4,408,4],[398,8,408,8,"specificity"],[398,19,408,19],[398,22,408,22],[398,23,408,23],[399,4,409,4],[399,10,409,10,"hasPlatformExtension"],[399,30,409,30],[399,33,409,33,"validPlatforms"],[399,47,409,47],[399,48,409,48,"has"],[399,51,409,51],[399,52,409,52,"platformExtension"],[399,69,409,69],[399,70,409,70],[400,4,410,4],[400,10,410,10,"usePlatformRoutes"],[400,27,410,27],[400,30,410,30,"options"],[400,37,410,37],[400,38,410,38,"platformRoutes"],[400,52,410,52],[400,56,410,56],[400,60,410,60],[401,4,411,4],[401,8,411,8,"hasPlatformExtension"],[401,28,411,28],[401,30,411,30],[402,6,412,8],[402,10,412,12],[402,11,412,13,"usePlatformRoutes"],[402,28,412,30],[402,30,412,32],[403,8,413,12],[404,8,414,12,"specificity"],[404,19,414,23],[404,22,414,26],[404,23,414,27],[404,24,414,28],[405,6,415,8],[405,7,415,9],[405,13,416,13],[405,17,416,17],[405,18,416,18,"options"],[405,25,416,25],[405,26,416,26,"platform"],[405,34,416,34],[405,36,416,36],[406,8,417,12],[407,8,418,12],[408,8,419,12,"specificity"],[408,19,419,23],[408,22,419,26],[408,23,419,27],[408,24,419,28],[409,6,420,8],[409,7,420,9],[409,13,421,13],[409,17,421,17,"platformExtension"],[409,34,421,34],[409,39,421,39,"options"],[409,46,421,46],[409,47,421,47,"platform"],[409,55,421,55],[409,57,421,57],[410,8,422,12],[411,8,423,12,"specificity"],[411,19,423,23],[411,22,423,26],[411,23,423,27],[412,6,424,8],[412,7,424,9],[412,13,425,13],[412,17,425,17,"platformExtension"],[412,34,425,34],[412,39,425,39],[412,47,425,47],[412,51,425,51,"options"],[412,58,425,58],[412,59,425,59,"platform"],[412,67,425,67],[412,72,425,72],[412,77,425,77],[412,79,425,79],[413,8,426,12],[414,8,427,12,"specificity"],[414,19,427,23],[414,22,427,26],[414,23,427,27],[415,6,428,8],[415,7,428,9],[415,13,429,13],[415,17,429,17,"platformExtension"],[415,34,429,34],[415,39,429,39,"options"],[415,46,429,46],[415,47,429,47,"platform"],[415,55,429,55],[415,57,429,57],[416,8,430,12],[417,8,431,12],[418,8,432,12,"specificity"],[418,19,432,23],[418,22,432,26],[418,23,432,27],[418,24,432,28],[419,6,433,8],[420,6,434,8],[420,10,434,12,"isApi"],[420,15,434,17],[420,19,434,21,"specificity"],[420,30,434,32],[420,35,434,37],[420,36,434,38],[420,38,434,40],[421,8,435,12],[421,14,435,18],[421,18,435,22,"Error"],[421,23,435,27],[421,24,435,28],[421,80,435,84,"platformExtension"],[421,97,435,101],[421,108,435,112,"originalKey"],[421,119,435,123],[421,122,435,126],[421,123,435,127],[422,6,436,8],[423,6,437,8,"route"],[423,11,437,13],[423,14,437,16,"route"],[423,19,437,21],[423,20,437,22,"replace"],[423,27,437,29],[423,28,437,30],[423,32,437,34,"RegExp"],[423,38,437,40],[423,39,437,41],[423,43,437,45,"platformExtension"],[423,60,437,62],[423,63,437,65],[423,64,437,66],[423,66,437,68],[423,68,437,70],[423,69,437,71],[424,4,438,4],[425,4,439,4],[425,11,439,11],[426,6,440,8,"route"],[426,11,440,13],[427,6,441,8,"specificity"],[427,17,441,19],[428,6,442,8,"isLayout"],[428,14,442,16],[429,6,443,8,"isApi"],[429,11,443,13],[430,6,444,8,"isRedirect"],[430,16,444,18],[430,18,444,20,"key"],[430,21,444,23],[430,25,444,27,"redirects"],[430,34,444,36],[431,6,445,8,"isRewrite"],[431,15,445,17],[431,17,445,19,"key"],[431,20,445,22],[431,24,445,26,"rewrites"],[432,4,446,4],[432,5,446,5],[433,2,447,0],[434,2,448,0],[434,11,448,9,"getIgnoreList"],[434,24,448,22,"getIgnoreList"],[434,25,448,23,"options"],[434,32,448,30],[434,34,448,32],[435,4,449,4],[435,10,449,10,"ignore"],[435,16,449,16],[435,19,449,19],[435,20,449,20],[435,43,449,43],[435,45,449,45],[435,49,449,49,"options"],[435,56,449,56],[435,58,449,58,"ignore"],[435,64,449,64],[435,68,449,68],[435,70,449,70],[435,71,449,71],[435,72,449,72],[436,4,450,4],[436,8,450,8,"options"],[436,15,450,15],[436,17,450,17,"preserveApiRoutes"],[436,34,450,34],[436,39,450,39],[436,43,450,43],[436,45,450,45],[437,6,451,8,"ignore"],[437,12,451,14],[437,13,451,15,"push"],[437,17,451,19],[437,18,451,20],[437,35,451,37],[437,36,451,38],[438,4,452,4],[439,4,453,4],[439,11,453,11,"ignore"],[439,17,453,17],[440,2,454,0],[441,2,455,0],[442,0,456,0],[443,0,457,0],[444,0,458,0],[445,0,459,0],[446,2,460,0],[446,11,460,9,"extrapolateGroups"],[446,28,460,26,"extrapolateGroups"],[446,29,460,27,"key"],[446,32,460,30],[446,34,460,32,"keys"],[446,38,460,36],[446,41,460,39],[446,45,460,43,"Set"],[446,48,460,46],[446,49,460,47],[446,50,460,48],[446,52,460,50],[447,4,461,4],[447,10,461,10,"match"],[447,15,461,15],[447,18,461,18],[447,19,461,19],[447,20,461,20],[447,22,461,22,"matchers_1"],[447,32,461,32],[447,33,461,33,"matchArrayGroupName"],[447,52,461,52],[447,54,461,54,"key"],[447,57,461,57],[447,58,461,58],[448,4,462,4],[448,8,462,8],[448,9,462,9,"match"],[448,14,462,14],[448,16,462,16],[449,6,463,8,"keys"],[449,10,463,12],[449,11,463,13,"add"],[449,14,463,16],[449,15,463,17,"key"],[449,18,463,20],[449,19,463,21],[450,6,464,8],[450,13,464,15,"keys"],[450,17,464,19],[451,4,465,4],[452,4,466,4],[452,10,466,10,"groups"],[452,16,466,16],[452,19,466,19,"match"],[452,24,466,24],[452,25,466,25,"split"],[452,30,466,30],[452,31,466,31],[452,34,466,34],[452,35,466,35],[453,4,467,4],[453,10,467,10,"groupsSet"],[453,19,467,19],[453,22,467,22],[453,26,467,26,"Set"],[453,29,467,29],[453,30,467,30,"groups"],[453,36,467,36],[453,37,467,37],[454,4,468,4],[454,8,468,8,"groupsSet"],[454,17,468,17],[454,18,468,18,"size"],[454,22,468,22],[454,27,468,27,"groups"],[454,33,468,33],[454,34,468,34,"length"],[454,40,468,40],[454,42,468,42],[455,6,469,8],[455,12,469,14],[455,16,469,18,"Error"],[455,21,469,23],[455,22,469,24],[455,75,469,77,"groups"],[455,81,469,83],[455,90,469,92,"key"],[455,93,469,95],[455,97,469,99],[455,98,469,100],[456,4,470,4],[457,4,471,4],[457,8,471,8,"groups"],[457,14,471,14],[457,15,471,15,"length"],[457,21,471,21],[457,26,471,26],[457,27,471,27],[457,29,471,29],[458,6,472,8,"keys"],[458,10,472,12],[458,11,472,13,"add"],[458,14,472,16],[458,15,472,17,"key"],[458,18,472,20],[458,19,472,21],[459,6,473,8],[459,13,473,15,"keys"],[459,17,473,19],[460,4,474,4],[461,4,475,4],[461,9,475,9],[461,15,475,15,"group"],[461,20,475,20],[461,24,475,24,"groups"],[461,30,475,30],[461,32,475,32],[462,6,476,8,"extrapolateGroups"],[462,23,476,25],[462,24,476,26,"key"],[462,27,476,29],[462,28,476,30,"replace"],[462,35,476,37],[462,36,476,38,"match"],[462,41,476,43],[462,43,476,45,"group"],[462,48,476,50],[462,49,476,51,"trim"],[462,53,476,55],[462,54,476,56],[462,55,476,57],[462,56,476,58],[462,58,476,60,"keys"],[462,62,476,64],[462,63,476,65],[463,4,477,4],[464,4,478,4],[464,11,478,11,"keys"],[464,15,478,15],[465,2,479,0],[466,2,480,0],[466,11,480,9,"generateDynamic"],[466,26,480,24,"generateDynamic"],[466,27,480,25,"path"],[466,31,480,29],[466,33,480,31],[467,4,481,4],[467,10,481,10,"dynamic"],[467,17,481,17],[467,20,481,20,"path"],[467,24,481,24],[467,25,482,9,"split"],[467,30,482,14],[467,31,482,15],[467,34,482,18],[467,35,482,19],[467,36,483,9,"map"],[467,39,483,12],[467,40,483,14,"part"],[467,44,483,18],[467,48,483,23],[468,6,484,8],[468,10,484,12,"part"],[468,14,484,16],[468,19,484,21],[468,31,484,33],[468,33,484,35],[469,8,485,12],[469,15,485,19],[470,10,486,16,"name"],[470,14,486,20],[470,16,486,22],[470,28,486,34],[471,10,487,16,"deep"],[471,14,487,20],[471,16,487,22],[471,20,487,26],[472,10,488,16,"notFound"],[472,18,488,24],[472,20,488,26],[473,8,489,12],[473,9,489,13],[474,6,490,8],[475,6,491,8],[475,13,491,15],[475,14,491,16],[475,15,491,17],[475,17,491,19,"matchers_1"],[475,27,491,29],[475,28,491,30,"matchDynamicName"],[475,44,491,46],[475,46,491,48,"part"],[475,50,491,52],[475,51,491,53],[475,55,491,57],[475,59,491,61],[476,4,492,4],[476,5,492,5],[476,6,492,6],[476,7,493,9,"filter"],[476,13,493,15],[476,14,493,17,"part"],[476,18,493,21],[476,22,493,26],[476,23,493,27],[476,24,493,28,"part"],[476,28,493,32],[476,29,493,33],[477,4,494,4],[477,11,494,11,"dynamic"],[477,18,494,18],[477,19,494,19,"length"],[477,25,494,25],[477,30,494,30],[477,31,494,31],[477,34,494,34],[477,38,494,38],[477,41,494,41,"dynamic"],[477,48,494,48],[478,2,495,0],[479,2,496,0],[479,11,496,9,"appendSitemapRoute"],[479,29,496,27,"appendSitemapRoute"],[479,30,496,28,"directory"],[479,39,496,37],[479,41,496,39,"options"],[479,48,496,46],[479,50,496,48],[480,4,497,4],[480,8,497,8],[480,9,497,9,"directory"],[480,18,497,18],[480,19,497,19,"files"],[480,24,497,24],[480,25,497,25,"has"],[480,28,497,28],[480,29,497,29],[480,39,497,39],[480,40,497,40],[480,44,497,44,"options"],[480,51,497,51],[480,52,497,52,"getSystemRoute"],[480,66,497,66],[480,68,497,68],[481,6,498,8,"directory"],[481,15,498,17],[481,16,498,18,"files"],[481,21,498,23],[481,22,498,24,"set"],[481,25,498,27],[481,26,498,28],[481,36,498,38],[481,38,498,40],[481,39,499,12,"options"],[481,46,499,19],[481,47,499,20,"getSystemRoute"],[481,61,499,34],[481,62,499,35],[482,8,500,16,"type"],[482,12,500,20],[482,14,500,22],[482,21,500,29],[483,8,501,16,"route"],[483,13,501,21],[483,15,501,23],[484,6,502,12],[484,7,502,13],[484,8,502,14],[484,9,503,9],[484,10,503,10],[485,4,504,4],[486,2,505,0],[487,2,506,0],[487,11,506,9,"appendNotFoundRoute"],[487,30,506,28,"appendNotFoundRoute"],[487,31,506,29,"directory"],[487,40,506,38],[487,42,506,40,"options"],[487,49,506,47],[487,51,506,49],[488,4,507,4],[488,8,507,8],[488,9,507,9,"directory"],[488,18,507,18],[488,19,507,19,"files"],[488,24,507,24],[488,25,507,25,"has"],[488,28,507,28],[488,29,507,29],[488,41,507,41],[488,42,507,42],[488,46,507,46,"options"],[488,53,507,53],[488,54,507,54,"getSystemRoute"],[488,68,507,68],[488,70,507,70],[489,6,508,8,"directory"],[489,15,508,17],[489,16,508,18,"files"],[489,21,508,23],[489,22,508,24,"set"],[489,25,508,27],[489,26,508,28],[489,38,508,40],[489,40,508,42],[489,41,509,12,"options"],[489,48,509,19],[489,49,509,20,"getSystemRoute"],[489,63,509,34],[489,64,509,35],[490,8,510,16,"type"],[490,12,510,20],[490,14,510,22],[490,21,510,29],[491,8,511,16,"route"],[491,13,511,21],[491,15,511,23],[492,6,512,12],[492,7,512,13],[492,8,512,14],[492,9,513,9],[492,10,513,10],[493,4,514,4],[494,2,515,0],[495,2,516,0],[495,11,516,9,"getLayoutNode"],[495,24,516,22,"getLayoutNode"],[495,25,516,23,"node"],[495,29,516,27],[495,31,516,29,"options"],[495,38,516,36],[495,40,516,38],[496,4,517,4],[497,0,518,0],[498,0,519,0],[499,0,520,0],[500,4,521,4],[501,4,522,4],[501,10,522,10,"groupName"],[501,19,522,19],[501,22,522,22],[501,23,522,23],[501,24,522,24],[501,26,522,26,"matchers_1"],[501,36,522,36],[501,37,522,37,"matchLastGroupName"],[501,55,522,55],[501,57,522,57,"node"],[501,61,522,61],[501,62,522,62,"route"],[501,67,522,67],[501,68,522,68],[502,4,523,4],[502,10,523,10,"childMatchingGroup"],[502,28,523,28],[502,31,523,31,"node"],[502,35,523,35],[502,36,523,36,"children"],[502,44,523,44],[502,45,523,45,"find"],[502,49,523,49],[502,50,523,51,"child"],[502,55,523,56],[502,59,523,61],[503,6,524,8],[503,13,524,15,"child"],[503,18,524,20],[503,19,524,21,"route"],[503,24,524,26],[503,25,524,27,"replace"],[503,32,524,34],[503,33,524,35],[503,43,524,45],[503,45,524,47],[503,47,524,49],[503,48,524,50],[503,53,524,55,"groupName"],[503,62,524,64],[504,4,525,4],[504,5,525,5],[504,6,525,6],[505,4,526,4],[505,8,526,8,"anchor"],[505,14,526,14],[505,17,526,17,"childMatchingGroup"],[505,35,526,35],[505,37,526,37,"route"],[505,42,526,42],[506,4,527,4],[506,10,527,10,"loaded"],[506,16,527,16],[506,19,527,19,"node"],[506,23,527,23],[506,24,527,24,"loadRoute"],[506,33,527,33],[506,34,527,34],[506,35,527,35],[507,4,528,4],[507,8,528,8,"loaded"],[507,14,528,14],[507,16,528,16,"unstable_settings"],[507,33,528,33],[507,35,528,35],[508,6,529,8],[508,10,529,12],[509,8,530,12],[510,8,531,12,"anchor"],[510,14,531,18],[510,17,532,16,"loaded"],[510,23,532,22],[510,24,532,23,"unstable_settings"],[510,41,532,40],[510,42,532,41,"anchor"],[510,48,532,47],[510,52,532,51,"loaded"],[510,58,532,57],[510,59,532,58,"unstable_settings"],[510,76,532,75],[510,77,532,76,"initialRouteName"],[510,93,532,92],[510,97,532,96,"anchor"],[510,103,532,102],[511,6,533,8],[511,7,533,9],[511,8,534,8],[511,15,534,15,"error"],[511,20,534,20],[511,22,534,22],[512,8,535,12],[512,12,535,16,"error"],[512,17,535,21],[512,29,535,33,"Error"],[512,34,535,38],[512,36,535,40],[513,10,536,16],[513,14,536,20],[513,15,536,21,"error"],[513,20,536,26],[513,21,536,27,"message"],[513,28,536,34],[513,29,536,35,"match"],[513,34,536,40],[513,35,536,41],[513,72,536,78],[513,73,536,79],[513,75,536,81],[514,12,537,20],[514,18,537,26,"error"],[514,23,537,31],[515,10,538,16],[516,8,539,12],[517,6,540,8],[518,6,541,8],[518,10,541,12,"groupName"],[518,19,541,21],[518,21,541,23],[519,8,542,12],[520,8,543,12],[520,14,543,18,"groupSpecificInitialRouteName"],[520,43,543,47],[520,46,543,50,"loaded"],[520,52,543,56],[520,53,543,57,"unstable_settings"],[520,70,543,74],[520,73,543,77,"groupName"],[520,82,543,86],[520,83,543,87],[520,85,543,89,"anchor"],[520,91,543,95],[520,95,544,16,"loaded"],[520,101,544,22],[520,102,544,23,"unstable_settings"],[520,119,544,40],[520,122,544,43,"groupName"],[520,131,544,52],[520,132,544,53],[520,134,544,55,"initialRouteName"],[520,150,544,71],[521,8,545,12,"anchor"],[521,14,545,18],[521,17,545,21,"groupSpecificInitialRouteName"],[521,46,545,50],[521,50,545,54,"anchor"],[521,56,545,60],[522,6,546,8],[523,4,547,4],[524,4,548,4],[524,11,548,11],[525,6,549,8],[525,9,549,11,"node"],[525,13,549,15],[526,6,550,8,"route"],[526,11,550,13],[526,13,550,15,"node"],[526,17,550,19],[526,18,550,20,"route"],[526,23,550,25],[526,24,550,26,"replace"],[526,31,550,33],[526,32,550,34],[526,45,550,47],[526,47,550,49],[526,49,550,51],[526,50,550,52],[527,6,551,8,"children"],[527,14,551,16],[527,16,551,18],[527,18,551,20],[528,6,551,22],[529,6,552,8,"initialRouteName"],[529,22,552,24],[529,24,552,26,"anchor"],[530,4,553,4],[530,5,553,5],[531,2,554,0],[532,2,555,0],[532,11,555,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[532,51,555,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[532,52,555,50,"node"],[532,56,555,54],[532,58,555,56,"options"],[532,65,555,63],[532,67,555,65,"entryPoints"],[532,78,555,76],[532,81,555,79],[532,83,555,81],[532,85,555,83],[533,4,556,4],[533,8,556,8,"node"],[533,12,556,12],[533,13,556,13,"type"],[533,17,556,17],[533,22,556,22],[533,29,556,29],[533,31,556,31],[534,6,557,8,"node"],[534,10,557,12],[534,11,557,13,"entryPoints"],[534,22,557,24],[534,25,557,27],[534,26,557,28],[534,29,557,31],[534,33,557,35,"Set"],[534,36,557,38],[534,37,557,39],[534,38,557,40],[534,41,557,43,"entryPoints"],[534,52,557,54],[534,54,557,56,"node"],[534,58,557,60],[534,59,557,61,"contextKey"],[534,69,557,71],[534,70,557,72],[534,71,557,73],[534,72,557,74],[535,4,558,4],[535,5,558,5],[535,11,559,9],[535,15,559,13,"node"],[535,19,559,17],[535,20,559,18,"type"],[535,24,559,22],[535,29,559,27],[535,39,559,37],[535,41,559,39],[536,6,560,8,"node"],[536,10,560,12],[536,11,560,13,"entryPoints"],[536,22,560,24],[536,25,560,27],[536,26,560,28],[536,29,560,31],[536,33,560,35,"Set"],[536,36,560,38],[536,37,560,39],[536,38,560,40],[536,41,560,43,"entryPoints"],[536,52,560,54],[536,54,560,56,"node"],[536,58,560,60],[536,59,560,61,"destinationContextKey"],[536,80,560,82],[536,81,560,83],[536,82,560,84],[536,83,560,85],[537,4,561,4],[537,5,561,5],[537,11,562,9],[537,15,562,13,"node"],[537,19,562,17],[537,20,562,18,"type"],[537,24,562,22],[537,29,562,27],[537,37,562,35],[537,39,562,37],[538,6,563,8],[538,10,563,12],[538,11,563,13,"node"],[538,15,563,17],[538,16,563,18,"children"],[538,24,563,26],[538,26,563,28],[539,8,564,12],[539,14,564,18],[539,18,564,22,"Error"],[539,23,564,27],[539,24,564,28],[539,35,564,39,"node"],[539,39,564,43],[539,40,564,44,"contextKey"],[539,50,564,54],[539,87,564,91],[539,88,564,92],[540,6,565,8],[541,6,566,8],[542,6,567,8,"entryPoints"],[542,17,567,19],[542,20,567,22],[542,21,567,23],[542,24,567,26,"entryPoints"],[542,35,567,37],[542,37,567,39,"node"],[542,41,567,43],[542,42,567,44,"contextKey"],[542,52,567,54],[542,53,567,55],[543,6,568,8],[544,0,569,0],[545,0,570,0],[546,0,571,0],[547,0,572,0],[548,0,573,0],[549,6,574,8],[549,12,574,14,"groupName"],[549,21,574,23],[549,24,574,26],[549,25,574,27],[549,26,574,28],[549,28,574,30,"matchers_1"],[549,38,574,40],[549,39,574,41,"matchGroupName"],[549,53,574,55],[549,55,574,57,"node"],[549,59,574,61],[549,60,574,62,"route"],[549,65,574,67],[549,66,574,68],[550,6,575,8],[550,12,575,14,"childMatchingGroup"],[550,30,575,32],[550,33,575,35,"node"],[550,37,575,39],[550,38,575,40,"children"],[550,46,575,48],[550,47,575,49,"find"],[550,51,575,53],[550,52,575,55,"child"],[550,57,575,60],[550,61,575,65],[551,8,576,12],[551,15,576,19,"child"],[551,20,576,24],[551,21,576,25,"route"],[551,26,576,30],[551,27,576,31,"replace"],[551,34,576,38],[551,35,576,39],[551,45,576,49],[551,47,576,51],[551,49,576,53],[551,50,576,54],[551,55,576,59,"groupName"],[551,64,576,68],[552,6,577,8],[552,7,577,9],[552,8,577,10],[553,6,578,8],[553,10,578,12,"anchor"],[553,16,578,18],[553,19,578,21,"childMatchingGroup"],[553,37,578,39],[553,39,578,41,"route"],[553,44,578,46],[554,6,579,8],[555,6,580,8],[555,10,580,12],[555,11,580,13,"options"],[555,18,580,20],[555,19,580,21,"internal_stripLoadRoute"],[555,42,580,44],[555,44,580,46],[556,8,581,12],[556,14,581,18,"loaded"],[556,20,581,24],[556,23,581,27,"node"],[556,27,581,31],[556,28,581,32,"loadRoute"],[556,37,581,41],[556,38,581,42],[556,39,581,43],[557,8,582,12],[557,12,582,16,"loaded"],[557,18,582,22],[557,20,582,24,"unstable_settings"],[557,37,582,41],[557,39,582,43],[558,10,583,16],[558,14,583,20],[559,12,584,20],[560,12,585,20,"anchor"],[560,18,585,26],[560,21,586,24,"loaded"],[560,27,586,30],[560,28,586,31,"unstable_settings"],[560,45,586,48],[560,46,586,49,"anchor"],[560,52,586,55],[560,56,586,59,"loaded"],[560,62,586,65],[560,63,586,66,"unstable_settings"],[560,80,586,83],[560,81,586,84,"initialRouteName"],[560,97,586,100],[560,101,586,104,"anchor"],[560,107,586,110],[561,10,587,16],[561,11,587,17],[561,12,588,16],[561,19,588,23,"error"],[561,24,588,28],[561,26,588,30],[562,12,589,20],[562,16,589,24,"error"],[562,21,589,29],[562,33,589,41,"Error"],[562,38,589,46],[562,40,589,48],[563,14,590,24],[563,18,590,28],[563,19,590,29,"error"],[563,24,590,34],[563,25,590,35,"message"],[563,32,590,42],[563,33,590,43,"match"],[563,38,590,48],[563,39,590,49],[563,76,590,86],[563,77,590,87],[563,79,590,89],[564,16,591,28],[564,22,591,34,"error"],[564,27,591,39],[565,14,592,24],[566,12,593,20],[567,10,594,16],[568,10,595,16],[568,14,595,20,"groupName"],[568,23,595,29],[568,25,595,31],[569,12,596,20],[570,12,597,20],[570,18,597,26,"groupSpecificInitialRouteName"],[570,47,597,55],[570,50,597,58,"loaded"],[570,56,597,64],[570,57,597,65,"unstable_settings"],[570,74,597,82],[570,77,597,85,"groupName"],[570,86,597,94],[570,87,597,95],[570,89,597,97,"anchor"],[570,95,597,103],[570,99,598,24,"loaded"],[570,105,598,30],[570,106,598,31,"unstable_settings"],[570,123,598,48],[570,126,598,51,"groupName"],[570,135,598,60],[570,136,598,61],[570,138,598,63,"initialRouteName"],[570,154,598,79],[571,12,599,20,"anchor"],[571,18,599,26],[571,21,599,29,"groupSpecificInitialRouteName"],[571,50,599,58],[571,54,599,62,"anchor"],[571,60,599,68],[572,10,600,16],[573,8,601,12],[574,6,602,8],[575,6,603,8],[575,10,603,12,"anchor"],[575,16,603,18],[575,18,603,20],[576,8,604,12],[576,14,604,18,"anchorRoute"],[576,25,604,29],[576,28,604,32,"node"],[576,32,604,36],[576,33,604,37,"children"],[576,41,604,45],[576,42,604,46,"find"],[576,46,604,50],[576,47,604,52,"child"],[576,52,604,57],[576,56,604,62,"child"],[576,61,604,67],[576,62,604,68,"route"],[576,67,604,73],[576,72,604,78,"anchor"],[576,78,604,84],[576,79,604,85],[577,8,605,12],[577,12,605,16],[577,13,605,17,"anchorRoute"],[577,24,605,28],[577,26,605,30],[578,10,606,16],[578,16,606,22,"validAnchorRoutes"],[578,33,606,39],[578,36,606,42,"node"],[578,40,606,46],[578,41,606,47,"children"],[578,49,606,55],[578,50,607,21,"filter"],[578,56,607,27],[578,57,607,29,"child"],[578,62,607,34],[578,66,607,39],[578,67,607,40,"child"],[578,72,607,45],[578,73,607,46,"generated"],[578,82,607,55],[578,83,607,56],[578,84,608,21,"map"],[578,87,608,24],[578,88,608,26,"child"],[578,93,608,31],[578,97,608,36],[578,101,608,40,"child"],[578,106,608,45],[578,107,608,46,"route"],[578,112,608,51],[578,115,608,54],[578,116,608,55],[578,117,609,21,"join"],[578,121,609,25],[578,122,609,26],[578,126,609,30],[578,127,609,31],[579,10,610,16],[579,14,610,20,"groupName"],[579,23,610,29],[579,25,610,31],[580,12,611,20],[580,18,611,26],[580,22,611,30,"Error"],[580,27,611,35],[580,28,611,36],[580,38,611,46,"node"],[580,42,611,50],[580,43,611,51,"contextKey"],[580,53,611,61],[580,77,611,85,"anchor"],[580,83,611,91],[580,100,611,108,"groupName"],[580,109,611,117],[580,135,611,143,"validAnchorRoutes"],[580,152,611,160],[580,154,611,162],[580,155,611,163],[581,10,612,16],[581,11,612,17],[581,17,613,21],[582,12,614,20],[582,18,614,26],[582,22,614,30,"Error"],[582,27,614,35],[582,28,614,36],[582,38,614,46,"node"],[582,42,614,50],[582,43,614,51,"contextKey"],[582,53,614,61],[582,77,614,85,"anchor"],[582,83,614,91],[582,108,614,116,"validAnchorRoutes"],[582,125,614,133],[582,127,614,135],[582,128,614,136],[583,10,615,16],[584,8,616,12],[585,8,617,12],[586,8,618,12,"node"],[586,12,618,16],[586,13,618,17,"initialRouteName"],[586,29,618,33],[586,32,618,36,"anchor"],[586,38,618,42],[587,8,619,12,"entryPoints"],[587,19,619,23],[587,20,619,24,"push"],[587,24,619,28],[587,25,619,29,"anchorRoute"],[587,36,619,40],[587,37,619,41,"contextKey"],[587,47,619,51],[587,48,619,52],[588,6,620,8],[589,6,621,8],[589,11,621,13],[589,17,621,19,"child"],[589,22,621,24],[589,26,621,28,"node"],[589,30,621,32],[589,31,621,33,"children"],[589,39,621,41],[589,41,621,43],[590,8,622,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[590,48,622,52],[590,49,622,53,"child"],[590,54,622,58],[590,56,622,60,"options"],[590,63,622,67],[590,65,622,69,"entryPoints"],[590,76,622,80],[590,77,622,81],[591,6,623,8],[592,4,624,4],[593,2,625,0],[594,2,626,0],[594,11,626,9,"getMostSpecific"],[594,26,626,24,"getMostSpecific"],[594,27,626,25,"routes"],[594,33,626,31],[594,35,626,33],[595,4,627,4],[595,10,627,10,"route"],[595,15,627,15],[595,18,627,18,"routes"],[595,24,627,24],[595,25,627,25,"routes"],[595,31,627,31],[595,32,627,32,"length"],[595,38,627,38],[595,41,627,41],[595,42,627,42],[595,43,627,43],[596,4,628,4],[596,8,628,8],[596,9,628,9,"routes"],[596,15,628,15],[596,16,628,16],[596,17,628,17],[596,18,628,18],[596,20,628,20],[597,6,629,8],[597,12,629,14],[597,16,629,18,"Error"],[597,21,629,23],[597,22,629,24],[597,34,629,36,"route"],[597,39,629,41],[597,40,629,42,"contextKey"],[597,50,629,52],[597,120,629,122],[597,121,629,123],[598,4,630,4],[599,4,631,4],[600,4,632,4],[601,4,633,4],[601,11,633,11,"routes"],[601,17,633,17],[601,18,633,18,"routes"],[601,24,633,24],[601,25,633,25,"length"],[601,31,633,31],[601,34,633,34],[601,35,633,35],[601,36,633,36],[602,2,634,0],[603,0,634,1],[603,3]],"functionMap":{"names":["<global>","getRoutes","getDirectoryTree","ignoreList.some$argument_0","contextKeys.map$argument_0","validRedirectDestinations.find$argument_0","node.loadRoute","flattenDirectoryTreeToRoutes","getFileMeta","getIgnoreList","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACqB;CDW;AEI;oCC+B,uCD;8DEI;iBFK;qDGG,qCH;oCC8B,uCD;8DEI;iBFK;mEGC,qCH;4BCqB,+BD;YIW;aJ+B;CFgK;AOI;CP2C;AQC;CRwD;ASC;CTM;AUM;CVmB;AWC;aCG;KDS;gBEC,gBF;CXE;AcC;CdS;AeC;CfS;AgBC;kDCO;KDE;ChB6B;AkBC;sDDoB;SCE;mDD2B,iCC;4BCG,2BD;yBEC,6BF;ClBiB;AqBC;CrBQ"}},"type":"js/module"}]}